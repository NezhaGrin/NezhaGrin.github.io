{"title":"搞定 HTTP 协议","uid":"44a298e41e961f01947480950600547b","slug":"搞定 HTTP 协议","date":"2024-02-18T09:19:57.000Z","updated":"2024-02-26T07:46:41.557Z","comments":true,"path":"api/articles/搞定 HTTP 协议.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>💡 Tips：HTTP 协议（超文本传输协议 HyperText Transfer Protocol），是一种<strong>基于 TCP&#x2F;IP 协议</strong>的<strong>应用层协议</strong>，用于在客户端和服务器之间传输超文本文档，<strong>超文本文档可以包含各种内容：文本、图形、音频、视频、二进制文件等</strong>。</p></blockquote>\n<h3 id=\"历史版本\"><a href=\"#历史版本\" class=\"headerlink\" title=\"历史版本\"></a>历史版本</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p><ol>\n<li>1991 年发布的 HTTP&#x2F;0.9 版本发布，该版本及其的简单，<strong>只有一个命令 GET ，且只支持文本传输</strong>；</li>\n<li>1996 年 5 月份， HTTP&#x2F;1.0 版本发布，内容大大的增加。<strong>可以传输任何格式的内容：文本、图形、音频、视频、二进制文件等</strong>。命令也进行了扩展，<strong>引入了 POST 和 HEAD 命令</strong>。但 1.0 版本存在一个缺点，<strong>不支持持久连接</strong>；</li>\n<li>1997 年 1 月，HTTP&#x2F;1.1 版本发布，进一步的完善了 HTTP 协议，也是现目前互联网使用最广泛的版本。1.1 版本最大的变化就是<strong>引入了持久连接</strong>；</li>\n<li>2015 年，HTTP&#x2F;2 发布。它不叫 HTTP&#x2F;2.0，因为标准委员会不打算再发布子版本了，下一个新版本将是 HTTP&#x2F;3 。3 版本的最大的改变，可能会抛弃掉 TCP 协议使用 UDP 协议；</li>\n</ol>\n</p>\n</div>\n<h3 id=\"持久化与非持久化\"><a href=\"#持久化与非持久化\" class=\"headerlink\" title=\"持久化与非持久化\"></a>持久化与非持久化</h3><h4 id=\"持久化（长连接）\"><a href=\"#持久化（长连接）\" class=\"headerlink\" title=\"持久化（长连接）\"></a>持久化（长连接）</h4><p>为了解决非持久连接的缺点，HTTP&#x2F;1.1 引入了持久连接的概念。<strong>在持久连接中，客户端和服务器之间的连接在一定的时间段内保持打开状态，可以在同一连接上发送多个请求和接收多个响应</strong>。这样做可以避免重复创建和关闭连接的开销，提高通信效率和性能。持久连接使得可以在一个连接上完成多个 HTTP 请求&#x2F;响应往返。</p>\n<h4 id=\"非持久化（短连接）\"><a href=\"#非持久化（短连接）\" class=\"headerlink\" title=\"非持久化（短连接）\"></a>非持久化（短连接）</h4><p>在 HTTP&#x2F;1.0 版本中，<strong>每次</strong>客户端发送请求给服务器时，都会创建<strong>一个新的 TCP 连接</strong>。这个连接在请求<strong>完成后会立即关闭</strong>。也就是说，<strong>每个请求和响应都需要独立的连接</strong>，这种方式被称为非持久连接。这种方法的缺点是，每次创建和关闭连接都需要时间和资源，会增加通信的延迟和消耗。</p>\n<h4 id=\"持久化优缺点\"><a href=\"#持久化优缺点\" class=\"headerlink\" title=\"持久化优缺点\"></a>持久化优缺点</h4><ul>\n<li>优点<ol>\n<li><strong>减少延迟：</strong> 可以在同一连接上连续发送多个请求和接收多个响应，减少了连接建立和关闭的开销，提高了通信的效率和性能；</li>\n<li><strong>节省资源：</strong> 保持连接打开可以避免重复的连接建立和关闭，节省了服务器和客户端的连接资源；</li>\n<li><strong>提高吞吐量：</strong> 长连接可以在一定程度上提高系统的吞吐量，<strong>特别是在大量并发请求的情况</strong>下；</li>\n</ol>\n</li>\n<li>缺点<ol>\n<li><strong>资源占用：</strong> 长时间保持连接打开会占用服务器和客户端的连接资源，可能会导致资源的浪费；</li>\n<li><strong>管理复杂性：</strong> 长连接需要管理连接的生命周期和状态，增加了系统的管理和维护成本；</li>\n<li><strong>占用连接数：</strong> 长连接会占用一定数量的连接数，可能会影响其他用户的访问和系统的可用性；</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"非持久化优缺点\"><a href=\"#非持久化优缺点\" class=\"headerlink\" title=\"非持久化优缺点\"></a>非持久化优缺点</h4><ul>\n<li>优点<ol>\n<li><strong>资源释放：</strong> 每个请求完成后立即关闭连接，释放了服务器和客户端的连接资源，有助于节省资源；</li>\n<li><strong>独立性：</strong> 每个请求和响应都使用独立的连接，相互独立，不会相互影响，有助于提高系统的稳定性；</li>\n<li><strong>灵活性：</strong> 适用于对延迟要求严格、资源受限或需要相对独立的场景；</li>\n</ol>\n</li>\n<li>缺点<ol>\n<li><strong>连接开销：</strong> 频繁地创建和关闭连接会增加通信的延迟和资源消耗，降低了通信的效率；</li>\n<li><strong>性能下降：</strong> 每次建立连接都需要进行三次握手，增加了网络延迟，降低了性能；</li>\n<li><strong>服务器负载：</strong> 大量的连接创建和关闭会增加服务器的负载，影响系统的性能和吞吐量；</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>无论是持久连接还是非持久连接，在建立 TCP 连接和关闭 TCP 连接时都需要<strong>遵循 TCP 的三次握手和四次挥手过程</strong>； </li>\n<li>Nginx 默认的持久连接超时时间为 75 秒，keepalive_timeout 可以设置持久连接的超时时间，如果客户端和服务器之间在设置的时间内没有任何活动，则 Nginx 会关闭持久连接；</li>\n</ul>\n<h3 id=\"初识传输层协议\"><a href=\"#初识传输层协议\" class=\"headerlink\" title=\"初识传输层协议\"></a>初识传输层协议</h3><p>在计算机网络中，<strong>应用层协议通常是建立在传输层协议之上的</strong>，这种关系通常被称为<strong>协议栈或协议堆叠</strong>。应用层协议利用传输层协议提供的服务来实现通信的目的。在继续深入 HTTP 协议前，有必要先看下网络组成图：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240221215446.png\"></div>\n\n<h4 id=\"TCP-传输控制协议\"><a href=\"#TCP-传输控制协议\" class=\"headerlink\" title=\"TCP 传输控制协议\"></a>TCP 传输控制协议</h4><ul>\n<li>TCP 是一种<strong>面向连接</strong>的协议，这意味着在发送数据之前，<strong>通信的两端需要建立一个连接</strong>；</li>\n<li>它提供<strong>可靠</strong>的数据传输，通过使用确认、重传、校验和流量控制等机制，确保数据的可靠性和完整性。如果数据在传输过程中丢失或损坏，TCP 将负责重新发送数据，直到接收到正确的数据为止；</li>\n<li>TCP 是一种流式协议（STREAM），数据被视为一连串的字节流，因此它保证了数据的顺序传输；</li>\n<li>在连接的建立和断开过程中，TCP 使用了<strong>三次握手</strong>和<strong>四次挥手</strong>的机制，以确保双方都同意建立或断开连接；</li>\n</ul>\n<h4 id=\"UDP-用户数据协议\"><a href=\"#UDP-用户数据协议\" class=\"headerlink\" title=\"UDP 用户数据协议\"></a>UDP 用户数据协议</h4><ul>\n<li>UDP 是一种<strong>无连接</strong>的协议，<strong>通信的两端在传输数据之前不需要建立连接</strong>；</li>\n<li>它提供了一种<strong>简单</strong>的数据传输机制，<strong>不保证数据的可靠性或顺序传输</strong>。如果数据在传输过程中丢失或损坏，UDP 不会进行重传，而是直接丢弃这些数据；</li>\n<li>UDP 适用于一些对<strong>实时性要求高</strong>、<strong>对数据可靠性要求较低的应用</strong>，比如音频、视频传输等；</li>\n<li>由于不需要建立连接和维护状态信息，<strong>UDP 的开销比 TCP 小，传输速度相对更快</strong>；</li>\n</ul>\n<h4 id=\"TCP-应用场景\"><a href=\"#TCP-应用场景\" class=\"headerlink\" title=\"TCP 应用场景\"></a>TCP 应用场景</h4><ul>\n<li><strong>网页浏览</strong>：当你在浏览网页时，通常会使用 TCP 协议。因为网页的数据传输需要保证数据的完整性和顺序性，这样才能确保页面元素的正确加载和显示；</li>\n<li><strong>电子邮件</strong>：发送和接收电子邮件时也通常使用 TCP。电子邮件的传输需要确保邮件内容的完整性，而且邮件的顺序也很重要，所以 TCP 协议是一个合适的选择。</li>\n<li><strong>文件传输</strong>：在需要可靠地传输大文件的场景下，TCP 是首选。FTP（文件传输协议）等文件传输服务通常使用 TCP 协议，因为它能够确保文件的完整传输，而且对传输顺序有要求；</li>\n<li><strong>远程登录</strong>：SSH（Secure Shell）等远程登录服务通常使用 TCP。远程登录需要确保传输的命令和输出是可靠的，并且需要保持会话的状态；</li>\n</ul>\n<h4 id=\"UDP-应用场景\"><a href=\"#UDP-应用场景\" class=\"headerlink\" title=\"UDP 应用场景\"></a>UDP 应用场景</h4><ul>\n<li><strong>实时视频&#x2F;音频传输</strong>：视频会议、在线直播等实时应用通常使用 UDP 协议。在这些应用中，实时性比数据的完整性更加重要，因此可以使用 UDP 以减少传输延迟；</li>\n<li><strong>实时游戏</strong>：在线游戏通常使用 UDP 进行通信，因为在游戏中延迟是非常关键的，而 UDP 能够提供更低的传输延迟，并且允许丢失部分数据而不会导致整个通信阻塞；</li>\n<li><strong>DNS（域名系统）查询</strong>：DNS 查询也常常使用 UDP 协议。虽然 DNS 查询需要准确的返回结果，但由于查询通常很小且响应时间敏感，因此 UDP 的简单性和低延迟使其成为了首选；</li>\n<li><strong>SNMP（简单网络管理协议）</strong>：网络管理中的 SNMP 通常使用 UDP。尽管管理信息的准确性很重要，但由于 SNMP 的查询通常是小且频繁的，UDP 提供了更好的性能和效率；</li>\n</ul>\n<h4 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h4><p>三次握手是 TCP 协议中用于<strong>建立连接</strong>的过程，确保了通信的可靠性和正确性，上图：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240221215651.png\"></div>\n\n<ol>\n<li>第一次握手（SYN） <ul>\n<li>客户端向服务器发送一个带有 SYN 标志的数据包，表示客户端请求建立连接，并指定一个初始序列号；</li>\n</ul>\n</li>\n<li>第二次握手（SYN + ACK） <ul>\n<li>服务器收到客户端的 SYN 数据包后，会发送一个带有 SYN 和 ACK 标志的数据包作为响应，表示确认收到连接请求，并且也指定一个初始序列号；</li>\n</ul>\n</li>\n<li>第三次握手（ACK） <ul>\n<li>客户端收到服务器的响应后，会发送一个带有 ACK 标志的数据包作为确认，表示确认收到服务器的响应，连接建立成功；</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h4><p>四次挥手是 TCP 协议中用于<strong>关闭连接</strong>的过程，确保了双方在断开连接时的可靠性，上图：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240221215808.png\"></div>\n\n<ol>\n<li>第一次挥手（FIN） <ul>\n<li>客户端向服务器发送一个带有 FIN（结束）标志的数据包，表示客户端不再发送数据，但仍然可以接收数据；</li>\n</ul>\n</li>\n<li>第二次挥手（ACK） <ul>\n<li>服务器收到客户端的 FIN 数据包后，会发送一个带有 ACK（确认）标志的数据包作为响应，表示确认收到客户端的关闭请求；</li>\n</ul>\n</li>\n<li>第三次挥手（FIN） <ul>\n<li>服务器在发送完所有数据后，会向客户端发送一个带有 FIN 标志的数据包，表示服务器也准备关闭连接；</li>\n</ul>\n</li>\n<li>第四次挥手（ACK） <ul>\n<li>客户端收到服务器的 FIN 数据包后，会发送一个带有 ACK 标志的数据包作为响应，表示确认收到服务器的关闭请求，连接关闭；</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"TCP-IP-通信传输流\"><a href=\"#TCP-IP-通信传输流\" class=\"headerlink\" title=\"TCP&#x2F;IP 通信传输流\"></a>TCP&#x2F;IP 通信传输流</h4><p>利用 TCP&#x2F;IP 协议族进行网络通信时，会通过分层顺序与对方进行通信。<strong>发送端从应用层往下走</strong>，<strong>接收端则从链路层往上走</strong>。如下：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240221215831.png\"></div>\n\n<h3 id=\"HTTP-工作流程\"><a href=\"#HTTP-工作流程\" class=\"headerlink\" title=\"HTTP 工作流程\"></a>HTTP 工作流程</h3><p>当浏览器（客户端）想要获取某个站点（服务端）网页时，它会按照以下步骤执行 HTTP 工作流程：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240221215957.png\"></div>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<ol>\n<li><strong>解析URL</strong>： <ol>\n<li>用户在浏览器中输入 URL（统一资源定位符）；</li>\n<li>浏览器解析 URL，提取出协议、域名和路径等信息；</li>\n</ol>\n</li>\n<li><strong>DNS解析</strong>： <ol>\n<li>浏览器发起 DNS 解析请求，将域名解析成服务器的 IP 地址；</li>\n<li>浏览器获取到服务器的 IP 地址后，就可以发起与服务器的连接了；</li>\n</ol>\n</li>\n<li><strong>建立TCP连接</strong>： <ol>\n<li>浏览器使用 HTTP 协议建立 TCP 连接到服务器；</li>\n<li>这是通过三次握手来建立可靠的连接；</li>\n</ol>\n</li>\n<li><strong>发送HTTP请求</strong>： <ol>\n<li>浏览器向服务器发送 HTTP 请求；</li>\n<li>HTTP 请求中包含了<strong>请求的方法</strong>（GET、POST等）、<strong>请求头</strong>和<strong>请求体</strong>等信息；</li>\n</ol>\n</li>\n<li><strong>服务器处理请求</strong>： <ol>\n<li>服务器接收到浏览器发送的 HTTP 请求后，根据请求的路径和方法等信息，处理请求；</li>\n<li>服务器可能会查询数据库、执行业务逻辑等，然后准备好需要发送给浏览器的 HTTP 响应；</li>\n</ol>\n</li>\n<li><strong>发送HTTP响应</strong>： <ol>\n<li>服务器将准备好的 HTTP 响应发送给浏览器；</li>\n<li>HTTP 响应中包含了<strong>响应的状态码</strong>、<strong>响应头</strong>和<strong>响应体</strong>等信息；</li>\n</ol>\n</li>\n<li><strong>接收HTTP响应</strong>： <ol>\n<li>浏览器接收到服务器发送的 HTTP 响应后，开始处理响应；</li>\n<li>浏览器会根据响应的内容类型等信息，决定如何处理响应；</li>\n</ol>\n</li>\n<li><strong>渲染页面</strong>： <ol>\n<li><strong>如果响应的内容是 HTML 页面，浏览器会解析 HTML 代码，并根据 CSS 样式表和 JavaScript 脚本等进行页面布局和渲染</strong>；</li>\n<li><strong>如果接收的 HTTP 响应是 API 接口响应。浏览器不需要渲染 HTML 页面，而是处理接收到的 JSON 或其他数据格式的响应，然后根据前端逻辑进行相应的处理</strong>；</li>\n<li>浏览器会将渲染后的页面呈现给用户，用户就可以在浏览器中看到网页内容了；</li>\n</ol>\n</li>\n<li><strong>关闭连接</strong>： <ol>\n<li>当页面加载完成后，浏览器会关闭与服务器的 TCP 连接，释放资源；</li>\n</ol>\n</li>\n</ol>\n\n</div>\n<h3 id=\"什么是-HTTP-事务？\"><a href=\"#什么是-HTTP-事务？\" class=\"headerlink\" title=\"什么是 HTTP 事务？\"></a>什么是 HTTP 事务？</h3><p>一次 HTTP 完整的工作流程步骤很多，重点关注在于请求与响应组合而成的 HTTP 事务。HTTP 事务 &#x3D; <strong>请求命令</strong> + <strong>响应结果</strong>。简单说就是一次完整的请求过程，包括请求的发送和结果的返回，如果只有发送请求，而没有响应结果，则不能算作 HTTP 事务。</p>\n<h3 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a>HTTP 请求</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /submit-form HTTP/1.1</span><br><span class=\"line\">ost: www.example.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: en-US,en;q=0.9</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 29</span><br><span class=\"line\"></span><br><span class=\"line\">username=user&amp;password=pass123</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请求报文可以分为三部分：</p>\n<ul>\n<li>请求行（Request Line）包括请求的<strong>命令</strong>、<strong>资源的路径</strong>和<strong>协议版本</strong>；</li>\n<li>请求头部（Request Headers）包括了一系列的键值对，用来描述请求的一些附加信息；</li>\n<li>请求体（Request Body）对于 GET 请求，通常为空，因为 GET 请求不包含请求体。对于其他一些请求方法（如POST、PUT等），请求体可能包含一些自定义数据或内容；</li>\n</ul></blockquote>\n<h4 id=\"请求命令\"><a href=\"#请求命令\" class=\"headerlink\" title=\"请求命令\"></a>请求命令</h4><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GET</td>\n<td>请求指定的页面信息，并返回实体主体</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>向指定资源提交数据进行处理请求</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>向指定资源位置上传新的实体主体</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>类似于GET请求，只不过返回的响应中没有具体的内容，用于获取资源的元信息</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>对资源进行部分修改</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>请求服务器告知其支持的HTTP方法</td>\n</tr>\n</tbody></table>\n<h4 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h4><table>\n<thead>\n<tr>\n<th>Header</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept</td>\n<td>告诉服务器，客户端支持的数据类型。</td>\n<td>Accept: text&#x2F;plain, text&#x2F;html</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>告诉服务器，客户端采用的编码。</td>\n<td>Accept-Charset: iso-8859-5,utf-8</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>告诉服务器，客户机支持的数据压缩格式。</td>\n<td>Accept-Encoding: compress, gzip</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>告诉服务器，客户机的语言环境。</td>\n<td>Accept-Language: en,zh</td>\n</tr>\n<tr>\n<td>Accept-Ranges</td>\n<td>可以请求网页实体的一个或者多个子范围字段</td>\n<td>Accept-Ranges: bytes</td>\n</tr>\n<tr>\n<td>Authorization</td>\n<td>HTTP授权的授权证书类型</td>\n<td>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>指定请求和响应遵循的缓存机制</td>\n<td>Cache-Control: no-cache</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>表示是否需要持久连接（HTTP 1.1默认进行持久连接）</td>\n<td>Keep-Alive</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器</td>\n<td>Cookie: $Version&#x3D;1; Skin&#x3D;new;</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>请求的内容长度</td>\n<td>Content-Length: 348</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>请求的与实体对应的MIME信息</td>\n<td>Content-Type: application&#x2F;x-www-form-urlencoded</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>请求发送的日期和时间</td>\n<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>\n</tr>\n<tr>\n<td>Expect</td>\n<td>请求的特定的服务器行为</td>\n<td>Expect: 100-continue</td>\n</tr>\n<tr>\n<td>From</td>\n<td>发出请求的用户的Email</td>\n<td>From: <a href=\"mailto:xxx@163.com\">xxx@163.com</a></td>\n</tr>\n<tr>\n<td>Host</td>\n<td>指定请求的服务器的域名和端口号</td>\n<td>Host: <a href=\"https://link.juejin.im/?target=http://www.zcmhi.com\">www.baidu.com</a></td>\n</tr>\n<tr>\n<td>If-Match</td>\n<td>只有请求内容与实体相匹配才有效</td>\n<td>If-Match: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>客户机通过这个头告诉服务器，资源的缓存时间。</td>\n<td>If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td>\n<td>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>If-Range</td>\n<td>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td>\n<td>If-Range: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>If-Unmodified-Since</td>\n<td>只在实体在指定时间之后未被修改才请求成功</td>\n<td>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>\n</tr>\n<tr>\n<td>Max-Forwards</td>\n<td>限制信息通过代理和网关传送的时间</td>\n<td>Max-Forwards: 10</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>用来包含实现特定的指令</td>\n<td>Pragma: no-cache</td>\n</tr>\n<tr>\n<td>Proxy-Authorization</td>\n<td>连接到代理的授权证书</td>\n<td>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>只请求实体的一部分，指定范围</td>\n<td>Range: bytes&#x3D;500-999</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的。（一般用于防盗链）</td>\n<td>Referer: <a href=\"https://link.juejin.im/?target=http://www.zcmhi.com/archives/71.html\">www.zcmhi.com/archives/71…</a></td>\n</tr>\n<tr>\n<td>TE</td>\n<td>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td>\n<td>TE: trailers,deflate;q&#x3D;0.5</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>向服务器指定某种传输协议以便服务器进行转换（如果支持）</td>\n<td>Upgrade: HTTP&#x2F;2.0, SHTTP&#x2F;1.3, IRC&#x2F;6.9, RTA&#x2F;x11</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>浏览器的具体信息</td>\n<td>User-Agent: Mozilla&#x2F;5.0 (Linux; X11)</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>通知中间网关或代理服务器地址，通信协议</td>\n<td>Via: 1.0 fred, 1.1 <a href=\"https://link.juejin.im/?target=http://nowhere.com\">nowhere.com</a></td>\n</tr>\n<tr>\n<td>(Apache&#x2F;1.1)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>关于消息实体的警告信息</td>\n<td>Warn: 199 Miscellaneous warning</td>\n</tr>\n</tbody></table>\n<h3 id=\"HTTP-响应\"><a href=\"#HTTP-响应\" class=\"headerlink\" title=\"HTTP 响应\"></a>HTTP 响应</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Sat, 01 Jan 2022 12:00:00 GMT</span><br><span class=\"line\">Server: Apache/2.4.41 (Unix)</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 56</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;Hello, world!&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;status&quot;</span>: <span class=\"string\">&quot;success&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>响应报文可以分为三部分：</p>\n<ul>\n<li>响应行（Status Line）包括了<strong>协议版本</strong>、<strong>状态码</strong>和<strong>状态消息</strong>；</li>\n<li>响应头部（Response Headers）包括了一系列的键值对，用来描述响应的一些附加信息；</li>\n<li>响应体（Response Body）包含了响应的实际内容；</li>\n</ul>\n</p>\n</div>\n<h4 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h4><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1xx</td>\n<td>指示信息 - 表示请求已接收，继续处理</td>\n</tr>\n<tr>\n<td>100</td>\n<td>客户必须继续发出请求。</td>\n</tr>\n<tr>\n<td>101</td>\n<td>客户要求服务器根据请求转换 HTTP 协议版本。</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>成功 - 表示请求已被成功接收、理解、接受</td>\n</tr>\n<tr>\n<td>200</td>\n<td>（成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</td>\n</tr>\n<tr>\n<td>201</td>\n<td>（已创建） 请求成功并且服务器创建了新的资源。</td>\n</tr>\n<tr>\n<td>202</td>\n<td>（已接受） 服务器已接受请求，但尚未处理。</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>重定向 - 要完成请求必须进行更进一步的操作</td>\n</tr>\n<tr>\n<td>300</td>\n<td>（多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者选择一项操作，或提供操作列表供请求者选择。</td>\n</tr>\n<tr>\n<td>301</td>\n<td>（永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应时，会自动将请求者转到新位置。</td>\n</tr>\n<tr>\n<td>302</td>\n<td>（临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端错误 - 请求有语法错误或请求无法实现</td>\n</tr>\n<tr>\n<td>400</td>\n<td>（错误请求） 服务器不理解请求的语法。</td>\n</tr>\n<tr>\n<td>401</td>\n<td>（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</td>\n</tr>\n<tr>\n<td>403</td>\n<td>（禁止） 服务器拒绝请求。</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务器端错误 - 服务器未能实现合法的请求</td>\n</tr>\n<tr>\n<td>500</td>\n<td>（服务器内部错误） 服务器遇到错误，无法完成请求。</td>\n</tr>\n<tr>\n<td>501</td>\n<td>（尚未实施） 服务器不具备完成请求的功能。</td>\n</tr>\n<tr>\n<td>502</td>\n<td>（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</td>\n</tr>\n<tr>\n<td>503</td>\n<td>（服务不可用） 服务器目前无法使用。 通常，这只是暂时状态。</td>\n</tr>\n<tr>\n<td>504</td>\n<td>（网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td>\n</tr>\n<tr>\n<td>505</td>\n<td>（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</td>\n</tr>\n</tbody></table>\n<h4 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h4><table>\n<thead>\n<tr>\n<th>Header</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept-Ranges</td>\n<td>表明服务器是否支持指定范围请求及哪种类型的分段请求</td>\n<td>Accept-Ranges: bytes</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td>\n<td>Age: 12</td>\n</tr>\n<tr>\n<td>Allow</td>\n<td>对某网络资源的有效的请求行为，不允许则返回405</td>\n<td>Allow: GET, HEAD</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>告诉所有的缓存机制是否可以缓存及哪种类型</td>\n<td>Cache-Control: no-cache</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>web服务器支持的返回内容压缩编码类型。</td>\n<td>Content-Encoding: gzip</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>响应体的语言</td>\n<td>Content-Language: en,zh</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>响应体的长度</td>\n<td>Content-Length: 348</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>请求资源可替代的备用的另一地址</td>\n<td>Content-Location: &#x2F;index.htm</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>返回资源的MD5校验值</td>\n<td>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>在整个返回体中本部分的字节位置</td>\n<td>Content-Range: bytes 21010-47021&#x2F;47022</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>如果返回是流式的数据，我们就必须告诉浏览器这个头，不然浏览器会下载这个页面，同时告诉浏览器是utf8编码，否则可能出现乱码</td>\n<td>Content-Type: text&#x2F;html; charset&#x3D;utf-8</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>原始服务器消息发出的时间</td>\n<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>请求变量的实体标签的当前值</td>\n<td>ETag: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>响应过期的日期和时间</td>\n<td>Expires: Thu, 01 Dec 2010 16:00:00 GMT</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>请求资源的最后修改时间</td>\n<td>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</td>\n<td>Location: <a href=\"http://www.zcmhi.com/archives/94.html\">http://www.zcmhi.com/archives/94.html</a></td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>包括实现特定的指令，它可应用到响应链上的任何接收方</td>\n<td>Pragma: no-cache</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>它指出认证方案和可应用到代理的该URL上的参数</td>\n<td>Proxy-Authenticate: Basic</td>\n</tr>\n<tr>\n<td>refresh</td>\n<td>应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</td>\n<td>Refresh: 5; url&#x3D;<a href=\"http://www.zcmhi.com/archives/94.html\">http://www.zcmhi.com/archives/94.html</a></td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td>\n<td>Retry-After: 120</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>web服务器软件名称</td>\n<td>Server: Apache&#x2F;1.3.27 (Unix) (Red-Hat&#x2F;Linux)</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>设置Http Cookie</td>\n<td>Set-Cookie: UserID&#x3D;JohnDoe; Max-Age&#x3D;3600; Version&#x3D;1</td>\n</tr>\n<tr>\n<td>Trailer</td>\n<td>指出头域在分块传输编码的尾部存在</td>\n<td>Trailer: Max-Forwards</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>文件传输编码</td>\n<td>Transfer-Encoding:chunked</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>告诉下游代理是使用缓存响应还是从原始服务器请求</td>\n<td>Vary: *</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>告知代理客户端响应是通过哪里发送的</td>\n<td>Via: 1.0 fred, 1.1 nowhere.com (Apache&#x2F;1.1)</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>警告实体可能存在的问题</td>\n<td>Warning: 199 Miscellaneous warning</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>表明客户端请求实体应该使用的授权方案</td>\n<td>WWW-Authenticate: Basic</td>\n</tr>\n</tbody></table>\n","text":"1991 年发布的 HTTP/0.9 版本发布，该版本及其的简单，只有一个命令 GET ，且只支持文本传输...","permalink":"/post/搞定 HTTP 协议","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"网络协议","slug":"网络协议","count":2,"path":"api/tags/网络协议.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">历史版本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%8C%96%E4%B8%8E%E9%9D%9E%E6%8C%81%E4%B9%85%E5%8C%96\"><span class=\"toc-text\">持久化与非持久化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%88%E9%95%BF%E8%BF%9E%E6%8E%A5%EF%BC%89\"><span class=\"toc-text\">持久化（长连接）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%88%E7%9F%AD%E8%BF%9E%E6%8E%A5%EF%BC%89\"><span class=\"toc-text\">非持久化（短连接）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%8C%96%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">持久化优缺点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E6%8C%81%E4%B9%85%E5%8C%96%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">非持久化优缺点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E8%AF%86%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">初识传输层协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TCP-%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">TCP 传输控制协议</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#UDP-%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">UDP 用户数据协议</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TCP-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">TCP 应用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#UDP-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">UDP 应用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B\"><span class=\"toc-text\">三次握手</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B\"><span class=\"toc-text\">四次挥手</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TCP-IP-%E9%80%9A%E4%BF%A1%E4%BC%A0%E8%BE%93%E6%B5%81\"><span class=\"toc-text\">TCP&#x2F;IP 通信传输流</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HTTP-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">HTTP 工作流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-HTTP-%E4%BA%8B%E5%8A%A1%EF%BC%9F\"><span class=\"toc-text\">什么是 HTTP 事务？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HTTP-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">HTTP 请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">请求命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%A4%B4\"><span class=\"toc-text\">请求头</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HTTP-%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">HTTP 响应</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81%E7%A0%81\"><span class=\"toc-text\">状态码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E5%A4%B4\"><span class=\"toc-text\">响应头</span></a></li></ol></li></ol>","author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"会话技术","uid":"425d803af0b4bf31b2b7e015a65ed6f3","slug":"会话技术","date":"2024-02-22T05:56:20.000Z","updated":"2024-02-26T07:46:39.530Z","comments":true,"path":"api/articles/会话技术.json","keywords":null,"cover":[],"text":"Session 是一种服务器端的状态管理机制，用于存储和跟踪用户的会话信息。与 Cookie 不同，Session 数据存储在服务器端，而不是客户端...","permalink":"/post/会话技术","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"网络协议","slug":"网络协议","count":2,"path":"api/tags/网络协议.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}