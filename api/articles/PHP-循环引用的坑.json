{"title":"PHP 循环引用的坑","uid":"56806a86a18bd19533ab1028ba81c230","slug":"PHP-循环引用的坑","date":"2024-03-01T09:36:28.000Z","updated":"2024-03-01T10:46:44.206Z","comments":true,"path":"api/articles/PHP-循环引用的坑.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>💡 Tips：实际开发工作中，循环是用的很多的一种处理数据的方式，虽然最常用，但是也是存在坑。</p></blockquote>\n<h3 id=\"循环引用\"><a href=\"#循环引用\" class=\"headerlink\" title=\"循环引用\"></a>循环引用</h3><p>如果想遍历数组时操作数组中每个元素，在 foreach 循环中使用引用会十分方便：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$arr</span> = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$arr</span> <span class=\"keyword\">as</span> &amp;<span class=\"variable\">$value</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$value</span> = <span class=\"variable\">$value</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出 2 4 6 8</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"variable\">$arr</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上述示例，在代码执行完以后，$value 仍保留在作用域内，并保留着对数组最后一个元素的引用。之后与 $value 相关的操作会无意中修改数组中最后一个元素的值。那是因为 <strong>foreach 并不会产生一个块级作用域</strong>。因此，在上面例子中 $value 是一个全局引用变量。</p>\n<h3 id=\"令人困惑的问题\"><a href=\"#令人困惑的问题\" class=\"headerlink\" title=\"令人困惑的问题\"></a>令人困惑的问题</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$array</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：1 2 3</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">implode</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"variable\">$array</span>), <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$array</span> <span class=\"keyword\">as</span> &amp;<span class=\"variable\">$value</span>) &#123;&#125;    <span class=\"comment\">// 通过引用遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：1 2 3</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">implode</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"variable\">$array</span>), <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$array</span> <span class=\"keyword\">as</span> <span class=\"variable\">$value</span>) &#123;&#125;     <span class=\"comment\">// 通过赋值遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：1 2 2</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">implode</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"variable\">$array</span>), <span class=\"string\">&quot;\\n&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p><strong>你没有看错，最后一行的最后一个值是 2 ，而不是 3 ，为什么？</strong></p>\n</div>\n<p>在完成第一个 foreach 遍历后， $array 并没有改变，但是像上述解释的那样， $value 留下了一个对 $array 最后一个元素的危险的引用。这导致当运行到第二个 foreach ，这个 “奇怪的东西” 发生了。当 $value 通过赋值获得， foreach 按顺序复制每个 $array 的元素到 $value 时，第二个 foreach 里面的细节是这样的：</p>\n<ul>\n<li>第一步：复制 $array[0] （也就是 1 ）到 $value （$value 其实是 $array 最后一个元素的引用，即 $array[2]），所以 $array[2] 现在等于 1。所以 $array 现在包含 [1, 2, 1]；</li>\n<li>第二步：复制 $array[1]（也就是 2 ）到 $value （ $array[2] 的引用），所以 $array[2] 现在等于 2。所以 $array 现在包含 [1, 2, 2]；</li>\n<li>第三步：复制 $array[2]（现在等于 2 ） 到 $value （ $array[2] 的引用），所以 $array[2] 现在等于 2 。所以 $array 现在包含 [1, 2, 2]；</li>\n</ul>\n<h3 id=\"避免循环引用的坑\"><a href=\"#避免循环引用的坑\" class=\"headerlink\" title=\"避免循环引用的坑\"></a>避免循环引用的坑</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$arr</span> = <span class=\"keyword\">array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$arr</span> <span class=\"keyword\">as</span> &amp;<span class=\"variable\">$value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$value</span> = <span class=\"variable\">$value</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unset</span>(<span class=\"variable\">$value</span>);   <span class=\"comment\">// $value 不再引用 $arr[3]</span></span><br></pre></td></tr></table></figure>","text":"实际开发工作中，循环是用的很多的一种处理数据的方式，虽然最常用，但是也是存在坑。...","permalink":"/post/PHP-循环引用的坑","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">循环引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A4%E4%BA%BA%E5%9B%B0%E6%83%91%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">令人困惑的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%BF%E5%85%8D%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E7%9A%84%E5%9D%91\"><span class=\"toc-text\">避免循环引用的坑</span></a></li></ol>","author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"PHP 实现滑块验证码","uid":"e3f85d15765fb35f42774d665bc192c9","slug":"PHP-实现滑块验证码","date":"2024-03-01T09:36:48.000Z","updated":"2024-03-01T10:57:39.268Z","comments":true,"path":"api/articles/PHP-实现滑块验证码.json","keywords":null,"cover":[],"text":"PHP 实现滑动块验证码。...","permalink":"/post/PHP-实现滑块验证码","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"PHP","slug":"PHP","count":5,"path":"api/tags/PHP.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"PHP 多进程定时任务","uid":"a9a874d78a99ce0f41c468a49561eea5","slug":"PHP-多进程定时任务","date":"2024-03-01T09:36:18.000Z","updated":"2024-03-01T10:17:29.817Z","comments":true,"path":"api/articles/PHP-多进程定时任务.json","keywords":null,"cover":null,"text":"Supervisor 是用 python 开发的一个在 Linux 系统下的进程管理工具，可以方便的监听、启动、停止一个或多个进程。使用更加的简单、好管理。...","permalink":"/post/PHP-多进程定时任务","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"PHP","slug":"PHP","count":5,"path":"api/tags/PHP.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}