{"title":"CSRF 跨站请求伪造","uid":"ac14aa432059f55e019575ce164ebb6c","slug":"CSRF-跨站请求伪造","date":"2024-03-02T04:51:20.000Z","updated":"2024-03-02T06:33:30.530Z","comments":true,"path":"api/articles/CSRF-跨站请求伪造.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>💡 Tips：跨站请求伪造（Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， <strong>是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方式</strong>。跟跨网站脚本攻击相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p></blockquote>\n<h3 id=\"攻击原理\"><a href=\"#攻击原理\" class=\"headerlink\" title=\"攻击原理\"></a>攻击原理</h3><p>Csrf 攻击，简单的说，是攻击者通过一些技术手段欺骗用户的浏览器去<strong>访问一个自己曾经认证过的网站并执行一些操作</strong>，如：如发邮件、发消息、甚至财产操作如转账和购买商品。</p>\n<p>由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了 Web 中用户身份验证的一个漏洞。简单的身份验证只能保证请求是发自某个用户的浏览器，却不能保证请求本身是用户自愿发出。</p>\n<p>通过文字的说明可能显得比较苍白无力，那么我们可以通过一个简单的示例来演示 Csrf 的攻击原理，假如此时我们需要在一个站点进行转账的操作：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302142110.png\"></div>\n\n<p>可以发现，在转账的时候需要验证登陆状态，在登陆完成后可以发现 Session 保存着登陆的状态：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302142226.png\"></div>\n\n<p>假如当操作完转账后，并没有关闭当前转账页面，随即去浏览了一个被插入了 Csrf 攻击的页面，那么此时就已经被攻击了：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302142312.png\"></div>\n\n<p>Csrf 攻击页面的核心代码，GET 和 POST 都可以发起攻击：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302142336.png\"></div>\n\n<p>查看日志可以发现，不知道什么时候多出了一笔 2000 元的转账记录，说明攻击者已经得逞所愿了：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302142409.png\"></div>\n\n<h3 id=\"防御之道\"><a href=\"#防御之道\" class=\"headerlink\" title=\"防御之道\"></a>防御之道</h3><p>有攻击的手段那么相对应就有防御的手段，总结一下可以分为以下几种：</p>\n<ul>\n<li>加入验证码；</li>\n<li>Anti Csrf Token；</li>\n<li>验证 HTTP 请求头当中的 Referer 字段；</li>\n<li>自定义 HTTP 请求头当中的字段，做为登陆状态验证；</li>\n</ul>\n<h4 id=\"加入验证码\"><a href=\"#加入验证码\" class=\"headerlink\" title=\"加入验证码\"></a>加入验证码</h4><p>在进行转账操作或者其他敏感操作时，一般的应用平台会进行<strong>手机短信验证码的验证</strong>，像交易所这类的应用平台，<strong>会进行 Google 身份验证器的验证</strong>。一切的验证手动只为了证明一点，就是当前操作是属于用户行为。</p>\n<h4 id=\"Anti-Csrf-Token\"><a href=\"#Anti-Csrf-Token\" class=\"headerlink\" title=\"Anti Csrf Token\"></a>Anti Csrf Token</h4><p>就现代化的框架来说，Anti Csrf Token 就已经内置，比如 Laravel 处理 Csrf 就非常的简单：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302142641.png\"></div>\n\n<p>Laravel 存在 VerifyCsrfToken 验证的中间件，在配合的 Csrf 字段一起使用即可：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form method=<span class=\"string\">&quot;POST&quot;</span> action=<span class=\"string\">&quot;/profile&quot;</span>&gt;</span><br><span class=\"line\">    @csrf</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"验证-HTTP-请求头当中的-Referer-字段\"><a href=\"#验证-HTTP-请求头当中的-Referer-字段\" class=\"headerlink\" title=\"验证 HTTP 请求头当中的 Referer 字段\"></a>验证 HTTP 请求头当中的 Referer 字段</h4><p>在接口请求时，验证 HTTP 请求头当中的 Referer 字段值是否与我们当前服务器的地址一致，如果一致那么就进行放行的操作，<strong>但是 Referer 字段是可以伪造的，所以也不太安全</strong>。</p>\n<h4 id=\"自定义-HTTP-请求头当中的字段，做为登陆状态验证\"><a href=\"#自定义-HTTP-请求头当中的字段，做为登陆状态验证\" class=\"headerlink\" title=\"自定义 HTTP 请求头当中的字段，做为登陆状态验证\"></a>自定义 HTTP 请求头当中的字段，做为登陆状态验证</h4><p>就现代化的 Web 开发来说，使用 JWT 做为用户资源验证已经是属于常态化了。用户登陆状态完全存储在 HTTP 自定义的请求头当中，从而抛弃掉 Cookie 与 Session 做为用户登陆状态的验证。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>就安全方面的考虑，在我们实际工作当中，这些防御的手段都应该用上。<strong>就敏感操作上来说，加上验证码是最好的验证手段，没有之一</strong>。</p>\n","feature":true,"text":"跨站请求伪造（Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方式。跟跨网站脚本攻击相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。...","permalink":"/post/CSRF-跨站请求伪造","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"CSRF 攻击","slug":"CSRF-攻击","count":1,"path":"api/tags/CSRF-攻击.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">攻击原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%B2%E5%BE%A1%E4%B9%8B%E9%81%93\"><span class=\"toc-text\">防御之道</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%85%A5%E9%AA%8C%E8%AF%81%E7%A0%81\"><span class=\"toc-text\">加入验证码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Anti-Csrf-Token\"><span class=\"toc-text\">Anti Csrf Token</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%AA%8C%E8%AF%81-HTTP-%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%BD%93%E4%B8%AD%E7%9A%84-Referer-%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">验证 HTTP 请求头当中的 Referer 字段</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-HTTP-%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%BD%93%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5%EF%BC%8C%E5%81%9A%E4%B8%BA%E7%99%BB%E9%99%86%E7%8A%B6%E6%80%81%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">自定义 HTTP 请求头当中的字段，做为登陆状态验证</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"CORS 跨域","uid":"fcf74d57b2e8c0127c7c3a4a7c468374","slug":"CORS-跨域","date":"2024-03-02T07:12:30.000Z","updated":"2024-03-02T07:12:30.940Z","comments":true,"path":"api/articles/CORS-跨域.json","keywords":null,"cover":null,"text":"","permalink":"/post/CORS-跨域","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"XSS 跨站脚本攻击","uid":"49ce7745148da4781e63360a9861bbaf","slug":"XSS-跨站脚本攻击","date":"2024-03-02T04:51:07.000Z","updated":"2024-03-02T06:14:39.031Z","comments":true,"path":"api/articles/XSS-跨站脚本攻击.json","keywords":null,"cover":[],"text":"XSS 攻击本质上是利用客户端恶意的插入 JS 代码，当用户浏览被恶意注入的页面时，JS 脚本会被执行，从而达到恶意攻击用户的目的，更加危害的是还可以做到对服务器的攻击。...","permalink":"/post/XSS-跨站脚本攻击","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"XSS 攻击","slug":"XSS-攻击","count":1,"path":"api/tags/XSS-攻击.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}