{"title":"XSS 跨站脚本攻击","uid":"49ce7745148da4781e63360a9861bbaf","slug":"XSS-跨站脚本攻击","date":"2024-03-02T04:51:07.000Z","updated":"2024-03-02T06:14:39.031Z","comments":true,"path":"api/articles/XSS-跨站脚本攻击.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>💡 Tips：XSS 攻击本质上是利用客户端恶意的插入 JS 代码，当用户浏览被恶意注入的页面时，JS 脚本会被执行，从而达到恶意攻击用户的目的，更加危害的是还可以做到对服务器的攻击。</p></blockquote>\n<h3 id=\"XSS-攻击危害\"><a href=\"#XSS-攻击危害\" class=\"headerlink\" title=\"XSS 攻击危害\"></a>XSS 攻击危害</h3><ul>\n<li>网页挂马；</li>\n<li>钓鱼攻击；</li>\n<li>获取浏览器 Cookie 或者 Token，伪造用户身份登陆；</li>\n</ul>\n<h3 id=\"XSS-攻击案例\"><a href=\"#XSS-攻击案例\" class=\"headerlink\" title=\"XSS 攻击案例\"></a>XSS 攻击案例</h3><p>用一个比较经典的案例，留言板：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302134750.png\"></div>\n\n<p>大概意思模拟一哈，攻击者利用留言功能恶意的插入 JS 代码，如果后台没有做任何处理的话，那么此时留言板就已经被攻击了：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302134948.png\"></div>\n\n<p>恶意的 JS 代码已经成功插入了，并且已经存储到我们的数据库当中了：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302135035.png\"></div>\n\n<p>当在刷新页面时就会发现，现在已经被攻击了：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302135105.png\"></div>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>通过案例不难看出，<strong>XSS 攻击其实就是利用数据传参实现</strong>，已然知晓攻击是通过数据传参达到攻击，那防御的点也就是对于数据参数的处理了。XSS 的攻击手段不止数据传参这一种攻击手段，还存在：浏览器 URL 攻击、DOM 攻击。只是对于后台来说，传参是最重要的防御点。</p>\n</div>\n<h3 id=\"XSS-防御手段\"><a href=\"#XSS-防御手段\" class=\"headerlink\" title=\"XSS 防御手段\"></a>XSS 防御手段</h3><p>对于使用 Laravel 来做全栈开发的话，那么 Blade 语法就已经使用 <strong>htmlspecialchars()</strong> 函数进行输出了。但是 htmlspecialchars() 并能完全的解决这个问题，XSS 的骚操作太多了，让人防不胜防。<a href=\"https://saucer-man.com/information_security/103.html\">探索 XSS 利用编码绕过的原理</a>，这篇文章当中的讲的就是利用编码来绕过过滤。</p>\n<h4 id=\"purifier-扩展包\"><a href=\"#purifier-扩展包\" class=\"headerlink\" title=\"purifier 扩展包\"></a>purifier 扩展包</h4><p>这里推荐一个扩展包，<a href=\"https://packagist.org/packages/mews/purifier\">mews&#x2F;purifier</a> ，purifier 是 <a href=\"https://packagist.org/packages/ezyang/htmlpurifier\">htmlpurifier</a> 的 Laravel 实现。运用『白名单机制』对 HTML 文本信息进行 XSS 过滤。</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require mews/purifier</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"发布配置\"><a href=\"#发布配置\" class=\"headerlink\" title=\"发布配置\"></a>发布配置</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan vendor:publish --provider=<span class=\"string\">&quot;Mews\\Purifier\\PurifierServiceProvider&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean(request()-&gt;input(<span class=\"string\">&#x27;content&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>注意：我们可以使用的标记在 config&#x2F;purifier.php HTML.Allowed 配置当中</p>\n</div>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下是默认的允许的标记</span></span><br><span class=\"line\"><span class=\"string\">&#x27;HTML.Allowed&#x27;</span>             <span class=\"string\">=&gt;</span> <span class=\"string\">&#x27;div,b,strong,i,em,u,a[href|title],ul,ol,li,p[style],br,span[style],img[width|height|alt|src]&#x27;</span><span class=\"string\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>在我们使用 clean 过滤参数之后，默认自动段落的也就是说数据会自动加上 “ P “ 标记：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302135724.png\"></div>\n\n<p>如果不需要加上 “ P “ 标记，那么我们需要把配置文件当中的 AutoFormat.AutoParagraph 改为 false：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;AutoFormat.AutoParagraph&#x27;</span> <span class=\"string\">=&gt;</span> <span class=\"literal\">false</span><span class=\"string\">,</span></span><br></pre></td></tr></table></figure>\n\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302135810.png\"></div>\n\n<p>回到最开始，我们在 HTML.Allowed 允许的情况下，那么我们 HTML 标记就不会被过滤掉：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302135842.png\"></div>\n\n<h5 id=\"使用中间件全局过滤\"><a href=\"#使用中间件全局过滤\" class=\"headerlink\" title=\"使用中间件全局过滤\"></a>使用中间件全局过滤</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:middleware ApiXssClean</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\"><span class=\"variable\">$request</span>, <span class=\"built_in\">Closure</span> <span class=\"variable\">$next</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$input</span> = <span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">all</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">array_walk_recursive</span>(<span class=\"variable\">$input</span>,function(&amp;<span class=\"variable\">$input</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$input</span> = <span class=\"title function_ invoke__\">is_string</span>(<span class=\"variable\">$input</span>) ? <span class=\"title function_ invoke__\">trim</span>(<span class=\"title function_ invoke__\">clean</span>(<span class=\"variable\">$input</span>)) : <span class=\"variable\">$input</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">merge</span>(<span class=\"variable\">$input</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$next</span>(<span class=\"variable\">$request</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302135952.png\"></div>","feature":true,"text":"XSS 攻击本质上是利用客户端恶意的插入 JS 代码，当用户浏览被恶意注入的页面时，JS 脚本会被执行，从而达到恶意攻击用户的目的，更加危害的是还可以做到对服务器的攻击。...","permalink":"/post/XSS-跨站脚本攻击","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"XSS 攻击","slug":"XSS-攻击","count":1,"path":"api/tags/XSS-攻击.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#XSS-%E6%94%BB%E5%87%BB%E5%8D%B1%E5%AE%B3\"><span class=\"toc-text\">XSS 攻击危害</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#XSS-%E6%94%BB%E5%87%BB%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">XSS 攻击案例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#XSS-%E9%98%B2%E5%BE%A1%E6%89%8B%E6%AE%B5\"><span class=\"toc-text\">XSS 防御手段</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#purifier-%E6%89%A9%E5%B1%95%E5%8C%85\"><span class=\"toc-text\">purifier 扩展包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">发布配置</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4\"><span class=\"toc-text\">使用中间件全局过滤</span></a></li></ol></li></ol></li></ol>","author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"CSRF 跨站请求伪造","uid":"ac14aa432059f55e019575ce164ebb6c","slug":"CSRF-跨站请求伪造","date":"2024-03-02T04:51:20.000Z","updated":"2024-03-02T06:33:30.530Z","comments":true,"path":"api/articles/CSRF-跨站请求伪造.json","keywords":null,"cover":[],"text":"跨站请求伪造（Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方式。跟跨网站脚本攻击相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。...","permalink":"/post/CSRF-跨站请求伪造","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"CSRF 攻击","slug":"CSRF-攻击","count":1,"path":"api/tags/CSRF-攻击.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Laravel 配置多环境 Env 文件","uid":"5b2c3990e729e0dcdbbde8d888ffbc29","slug":"Laravel-配置多环境-Env-文件","date":"2024-03-02T04:50:53.000Z","updated":"2024-03-02T05:42:32.811Z","comments":true,"path":"api/articles/Laravel-配置多环境-Env-文件.json","keywords":null,"cover":[],"text":"在实际的项目当中，一个项目拥有多个环境是一个很正常的情况。当存在多个环境的情况下，在 Laravel 当中只需要配置多个 env 文件，管理这些 env 文件那么就可以轻松解决这个问题了。...","permalink":"/post/Laravel-配置多环境-Env-文件","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}