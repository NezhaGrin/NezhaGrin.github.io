{"title":"Laravel 配置多环境 Env 文件","uid":"5b2c3990e729e0dcdbbde8d888ffbc29","slug":"Laravel-配置多环境-Env-文件","date":"2024-03-02T04:50:53.000Z","updated":"2024-03-02T05:42:32.811Z","comments":true,"path":"api/articles/Laravel-配置多环境-Env-文件.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>💡 Tips：在实际的项目当中，一个项目拥有多个环境是一个很正常的情况。当存在多个环境的情况下，在 Laravel 当中只需要配置多个 env 文件，管理这些 env 文件那么就可以轻松解决这个问题了。</p></blockquote>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>以三个环境举例：开发环境、测试环境、正式环境。添加三个新的配置文件：.env.dev、.env.test、.env.prod。现在一个 env 文件对应一个环境，这样就已经从 env 层做出了区分。当配置文件准备好后，那么接下来就需要知晓一点 Laravel 加载配置文件的一点原理。Laravel 在加载配置文件时，首先会去读取系统当中的环境变量，如果存在 APP_ENV 那么就会优先去使用：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Detect if a custom environment file matching the APP_ENV exists.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  \\Illuminate\\Contracts\\Foundation\\Application  $app</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkForSpecificEnvironmentFile</span>(<span class=\"params\"><span class=\"variable\">$app</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">runningInConsole</span>() &amp;&amp; (<span class=\"variable\">$input</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ArgvInput</span>)-&gt;<span class=\"title function_ invoke__\">hasParameterOption</span>(<span class=\"string\">&#x27;--env&#x27;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setEnvironmentFilePath</span>(</span><br><span class=\"line\">                <span class=\"variable\">$app</span>, <span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">environmentFile</span>().<span class=\"string\">&#x27;.&#x27;</span>.<span class=\"variable\">$input</span>-&gt;<span class=\"title function_ invoke__\">getParameterOption</span>(<span class=\"string\">&#x27;--env&#x27;</span>)</span><br><span class=\"line\">            )) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$environment</span> = <span class=\"title class_\">Env</span>::<span class=\"title function_ invoke__\">get</span>(<span class=\"string\">&#x27;APP_ENV&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! <span class=\"variable\">$environment</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setEnvironmentFilePath</span>(</span><br><span class=\"line\">            <span class=\"variable\">$app</span>, <span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">environmentFile</span>().<span class=\"string\">&#x27;.&#x27;</span>.<span class=\"variable\">$environment</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240302133808.png\"></div>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h4><p>编写 Dockerfile 时，需修改 FPM 当中的 <a href=\"http://www.conf/\">www.conf</a> 在其中添加 env[APP_ENV] &#x3D; $APP_ENV 以便 PHP 可以读取环境变量，配合框架自身读取 APP_ENV 而获取匹配的 env 文件。</p>\n<h4 id=\"Jenkinsfile\"><a href=\"#Jenkinsfile\" class=\"headerlink\" title=\"Jenkinsfile\"></a>Jenkinsfile</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行镜像指定 APP_ENV 的值：</span></span><br><span class=\"line\">docker run -d -p 8080:80 -e APP_ENV=dev --name dev</span><br></pre></td></tr></table></figure>\n\n","text":"在实际的项目当中，一个项目拥有多个环境是一个很正常的情况。当存在多个环境的情况下，在 Laravel 当中只需要配置多个 env 文件，管理这些 env 文件那么就可以轻松解决这个问题了。...","permalink":"/post/Laravel-配置多环境-Env-文件","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Dockerfile\"><span class=\"toc-text\">Dockerfile</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Jenkinsfile\"><span class=\"toc-text\">Jenkinsfile</span></a></li></ol></li></ol>","author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"XSS 跨站脚本攻击","uid":"49ce7745148da4781e63360a9861bbaf","slug":"XSS-跨站脚本攻击","date":"2024-03-02T04:51:07.000Z","updated":"2024-03-02T06:14:39.031Z","comments":true,"path":"api/articles/XSS-跨站脚本攻击.json","keywords":null,"cover":[],"text":"XSS 攻击本质上是利用客户端恶意的插入 JS 代码，当用户浏览被恶意注入的页面时，JS 脚本会被执行，从而达到恶意攻击用户的目的，更加危害的是还可以做到对服务器的攻击。...","permalink":"/post/XSS-跨站脚本攻击","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"XSS 攻击","slug":"XSS-攻击","count":1,"path":"api/tags/XSS-攻击.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"自建日志聚合系统","uid":"6f86069348c95b8be65f6c4b03028387","slug":"自建日志聚合系统","date":"2024-03-01T09:37:02.000Z","updated":"2024-03-01T11:46:35.425Z","comments":true,"path":"api/articles/自建日志聚合系统.json","keywords":null,"cover":[],"text":"Loki 是受 Prometheus 启发的水平可扩展、高可用、多租户日志聚合系统。它被设计得非常轻量高效且易于操作。因为它不会为日志内容创建索引，而是为每个日志流配置一组标签。...","permalink":"/post/自建日志聚合系统","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"日志系统","slug":"日志系统","count":1,"path":"api/tags/日志系统.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}