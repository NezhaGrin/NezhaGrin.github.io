{"title":"RSA 非对称加密","uid":"bed83d6062569a837b3fdb59545fa846","slug":"RSA-非对称加密","date":"2024-02-26T11:53:22.000Z","updated":"2024-02-26T12:00:58.044Z","comments":true,"path":"api/articles/RSA-非对称加密.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>💡 Tips：RSA 加密是一种<strong>非对称加密算法</strong>，使用<strong>一对密钥</strong>进行加解密，分别为公钥和私钥。<strong>公钥用于加密信息</strong>，<strong>私钥用于解密信息</strong>。这种设置使得发送者可以使用公钥加密信息并发送给接收者，而只有接收者持有相应私钥才能解密并读取信息。</p>\n<p>RSA 加解密的核心是基于<strong>素数（只能被 1 和它自身整除的数）</strong>的算法，如果没有一个好的算法，那么加解密效率非常低！工作中移植过 CycloneSSH 的 <a href=\"https://github.com/Oryx-Embedded/CycloneCRYPTO/blob/49578a0662438af04bd151c6dbe6a603e7e4f5b5/pkc/rsa.c#L2065\">ssh-keygen</a> 生成公钥私钥效率极低，就是因为没有一个好的素数算法。</p>\n<p>随着现在计算机的计算能力提升和密码分析技术的进步，1024 长度的 rsa 加密已经不安全了，因此在使用时需要谨慎考虑密钥长度和算法的选择。</p></blockquote>\n<h3 id=\"非对称与对称加密\"><a href=\"#非对称与对称加密\" class=\"headerlink\" title=\"非对称与对称加密\"></a>非对称与对称加密</h3><p>当我们讨论加密时，通常会涉及两种主要类型：非对称加密和对称加密。</p>\n<h4 id=\"非对称加密\"><a href=\"#非对称加密\" class=\"headerlink\" title=\"非对称加密\"></a>非对称加密</h4><p>非对称加密使用<strong>一对密钥</strong>，分别称为公钥和私钥。公钥用于加密数据，而私钥用于解密数据。公钥是公开的，任何人都可以使用它来加密数据。私钥则由数据的接收者保密，用于解密数据。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>常见的非对称加密算法是 RSA（Rivest-Shamir-Adleman），非对称加密适用于<strong>需要安全通信、数字签名和身份验证</strong>等场景。</p>\n</div>\n<h4 id=\"非对称加密的应用场景\"><a href=\"#非对称加密的应用场景\" class=\"headerlink\" title=\"非对称加密的应用场景\"></a>非对称加密的应用场景</h4><ul>\n<li><strong>安全通信</strong>：非对称加密常用于安全通信，如电子邮件、文件传输等。发送者使用接收者的公钥来加密数据，而只有接收者拥有相应的私钥才能解密数据；</li>\n<li><strong>数字签名</strong>：非对称加密可用于生成和验证数字签名，以确保数据的真实性和完整性。发送者使用自己的私钥来对数据进行签名，而接收者可以使用发送者的公钥来验证签名；</li>\n<li><strong>密钥交换</strong>：非对称加密可用于安全地交换对称加密密钥。例如，Diffie-Hellman（SSH协议） 密钥交换协议使用非对称加密算法来协商对称密钥，从而实现安全通信；</li>\n<li><strong>身份验证</strong>：非对称加密可用于用户身份验证。例如，用户可以使用其私钥来生成数字签名，以证明其身份。；</li>\n</ul>\n<h4 id=\"对称加密\"><a href=\"#对称加密\" class=\"headerlink\" title=\"对称加密\"></a>对称加密</h4><p>对称加密使用<strong>相同的密钥</strong>（也称为“秘密密钥”）来加密和解密数据。这意味着发送者和接收者必须事先共享相同的密钥。在加密时，发送者使用密钥将明文转换为密文。然后，接收者使用相同的密钥将密文解密为明文。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>常见的对称加密算法包括 AES（高级加密标准）和 DES（数据加密标准）等。对称加密适用于<strong>需要高效加密大量数据</strong>的场景。</p>\n</div>\n<h4 id=\"对称加密应用场景\"><a href=\"#对称加密应用场景\" class=\"headerlink\" title=\"对称加密应用场景\"></a>对称加密应用场景</h4><ul>\n<li><strong>数据传输加密</strong>：对称加密常用于保护数据在传输过程中的安全性。例如，HTTPS 协议就使用对称加密算法来加密数据传输过程中的通信内容；</li>\n<li><strong>数据存储加密</strong>：对称加密可以用于保护数据在存储介质上的安全性。例如，加密文件系统（如 BitLocker）使用对称加密算法来加密存储在硬盘上的数据；</li>\n<li><strong>会话加密</strong>：对称加密可用于保护网络会话的安全性。例如，常见的 TLS&#x2F;SSL 协议使用对称加密算法来加密客户端和服务器之间的通信会话；</li>\n<li><strong>密码学应用</strong>：对称加密可用于密码学应用，如消息认证码（MAC）的生成和验证，以确保数据的完整性和真实性；</li>\n</ul>\n<h3 id=\"生成秘钥对\"><a href=\"#生成秘钥对\" class=\"headerlink\" title=\"生成秘钥对\"></a>生成秘钥对</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一步：生成私钥，这里我们指定私钥的长度为1024, 长度越长，加解密消耗的时间越长</span></span><br><span class=\"line\">openssl genrsa -out rsa_private_key.pem 1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二步：根据私钥生成对应的公钥</span></span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> rsa_private_key.pem -pubout -out rsa_public_key.pub</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第三步：私钥转化成pkcs8格式，【这一步非必须，只是程序解析起来方便】</span></span><br><span class=\"line\">openssl pkcs8 -topk8 -inform PEM -<span class=\"keyword\">in</span> rsa_private_key.pem -outform PEM -nocrypt -out rsa_private_key_pkcs8.pem</span><br></pre></td></tr></table></figure>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<ul>\n<li>Linux 需安装 OpenSSH：sudo apt-get install openssh-server；</li>\n<li>Windows 10 以及以上的版本自带 SSH 客户端，其他版本可以第三方工具使用 SSH 客户端；</li>\n</ul>\n\n</div>\n<h3 id=\"PHP-RSA-加解密\"><a href=\"#PHP-RSA-加解密\" class=\"headerlink\" title=\"PHP RSA 加解密\"></a>PHP RSA 加解密</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">App</span>\\<span class=\"title class_\">Services</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SignService</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$publicKey</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$privateKey</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;publicKey  = <span class=\"title function_ invoke__\">openssl_get_publickey</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;../rsa_public_key.pub&#x27;</span>));</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;privateKey = <span class=\"title function_ invoke__\">openssl_get_privatekey</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;../rsa_private_key_pkcs8.pem&#x27;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 公钥加密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $data</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">encrypt</span>(<span class=\"params\"><span class=\"variable\">$data</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$encrypt</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"title function_ invoke__\">str_split</span>(<span class=\"variable\">$data</span>, <span class=\"number\">117</span>) <span class=\"keyword\">as</span> <span class=\"variable\">$item</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">openssl_public_encrypt</span>(<span class=\"variable\">$item</span>, <span class=\"variable\">$encrypt</span>, <span class=\"variable\">$this</span>-&gt;publicKey);</span><br><span class=\"line\">            <span class=\"variable\">$encrypt</span> .= <span class=\"variable\">$temp</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_ invoke__\">openssl_free_key</span>(<span class=\"variable\">$this</span>-&gt;publicKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"variable\">$encrypt</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 私钥解密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $data</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decrypt</span>(<span class=\"params\"><span class=\"variable\">$data</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$data</span>    = <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$data</span>);</span><br><span class=\"line\">        <span class=\"variable\">$decrypt</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"title function_ invoke__\">str_split</span>(<span class=\"variable\">$data</span>, <span class=\"number\">128</span>) <span class=\"keyword\">as</span> <span class=\"variable\">$item</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">openssl_private_decrypt</span>(<span class=\"variable\">$item</span>, <span class=\"variable\">$temp</span>, <span class=\"variable\">$this</span>-&gt;privateKey);</span><br><span class=\"line\">            <span class=\"variable\">$decrypt</span> .= <span class=\"variable\">$temp</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_ invoke__\">openssl_free_key</span>(<span class=\"variable\">$this</span>-&gt;privateKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$decrypt</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 私钥生成签名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $data</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sign</span>(<span class=\"params\"><span class=\"variable\">$data</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$signature</span> = <span class=\"title function_ invoke__\">config</span>(<span class=\"string\">&#x27;app.signature&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_ invoke__\">openssl_sign</span>(<span class=\"variable\">$data</span>, <span class=\"variable\">$signature</span>, <span class=\"variable\">$this</span>-&gt;privateKey);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">openssl_free_key</span>(<span class=\"variable\">$this</span>-&gt;privateKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"variable\">$signature</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 公钥验证</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $data</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mixed $sign</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">veritySign</span>(<span class=\"params\"><span class=\"variable\">$data</span>,<span class=\"variable\">$sign</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">openssl_verify</span>(<span class=\"variable\">$data</span>, <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$sign</span>), <span class=\"variable\">$this</span>-&gt;publicKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_ invoke__\">openssl_free_key</span>(<span class=\"variable\">$this</span>-&gt;publicKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">bool</span>)<span class=\"variable\">$result</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>PHP 要操作 RSA 需要用到 OpenSSL 扩展库，另外需要注意：RSA 加密采用了<strong>分块</strong>进行加密，因此有长度限制。对于较长的原文，需要进行分段加解密，分别对每个分段进行加密（117）或解密（128），然后再合并结果。这种方式可以克服 RSA 加密长度的限制，但会出现效率问题，因为分段加解密可能会导致额外的计算开销。</p>\n</div>\n<h3 id=\"移植-ssh-keygen-客户端\"><a href=\"#移植-ssh-keygen-客户端\" class=\"headerlink\" title=\"移植 ssh-keygen 客户端\"></a>移植 ssh-keygen 客户端</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// libc 依赖</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cyclone 依赖</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;path.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;pkc/rsa.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;rng/trng.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;rng/yarrow.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ssh/ssh_key_export.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 随机数种子</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SEED_SIZE 32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rsa 支持的长度</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MIN_SUPPORT_BYTES 2048</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_SUPPORT_BYTES 16384</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认 ssh 存放路径</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SSH_PATH <span class=\"string\">&quot;/ssh&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 板子上终端最多只能输入 120 左右个字符</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_KEY_LEN 255</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Yarrow PRNG 上下文</span></span><br><span class=\"line\">YarrowContext yarrowContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 符号表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *symbolArray[] = &#123;<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;./&quot;</span>, <span class=\"string\">&quot;..&quot;</span>, <span class=\"string\">&quot;../&quot;</span>, <span class=\"string\">&quot;/&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">state</span> &#123;</span></span><br><span class=\"line\">    HELP,</span><br><span class=\"line\">    FAILED_BIT_SIZE,</span><br><span class=\"line\">    FAILED_BIT_TYPE</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 生成参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GenerateParam</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> bitSize;</span><br><span class=\"line\">    <span class=\"type\">char_t</span> *filename;</span><br><span class=\"line\">    <span class=\"type\">char_t</span> *algorithm;</span><br><span class=\"line\">&#125; generateParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 打印信息</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param[in] code  状态码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">printUsage</span><span class=\"params\">(<span class=\"type\">int_t</span> code)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (code) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HELP:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;usage: ssh-keygen [OPTIONS] &lt;file&gt;...\\n\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;OPTIONS: [-b bits] [-f output_keyfile] [-t dsa | ecdsa | ed25519 | rsa]\\n\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-b &lt;bits&gt; Specify the key length \\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-f &lt;output_keyfile&gt; Specifies the file name to save the key \\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-t Specifies the type of key to create \\&quot;Only RSA is supported\\&quot; \\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FAILED_BIT_SIZE:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The key length is 2048 range 16384 \\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FAILED_BIT_TYPE:</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Bits value invalid \\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief 写入生成的证书秘钥</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param[in] certPublicKey  公钥</span></span><br><span class=\"line\"><span class=\"comment\"> * @param[in] certPrivateKey 私钥</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">writeGenerateCertKeys</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char_t</span> *certPublicKey, <span class=\"type\">const</span> <span class=\"type\">char_t</span> *certPrivateKey)</span> &#123;</span><br><span class=\"line\">    FILE *pubFile, *priFile;</span><br><span class=\"line\">    <span class=\"type\">char_t</span> pubKeyPath[MAX_KEY_LEN];</span><br><span class=\"line\">    <span class=\"type\">char_t</span> priKeyPath[MAX_KEY_LEN];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (generateParam.algorithm == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        generateParam.algorithm = <span class=\"string\">&quot;rsa&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (generateParam.filename == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (access(SSH_PATH, F_OK) != <span class=\"number\">0</span> &amp;&amp; mkdir(SSH_PATH, <span class=\"number\">0777</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Saving key \\&quot;%s\\&quot; failed: No such file or directory\\n&quot;</span>, SSH_PATH);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(ERROR_DIRECTORY_NOT_FOUND);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(pubKeyPath, MAX_KEY_LEN, <span class=\"string\">&quot;%s%s%s%s&quot;</span>, SSH_PATH, <span class=\"string\">&quot;/id_&quot;</span>, generateParam.algorithm, <span class=\"string\">&quot;.pub&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(priKeyPath, MAX_KEY_LEN, <span class=\"string\">&quot;%s%s%s&quot;</span>, SSH_PATH, <span class=\"string\">&quot;/id_&quot;</span>, generateParam.algorithm);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">uint_t</span> isSymbolTableMatched = FALSE;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">char_t</span> *filename = pathGetFilename(generateParam.filename);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">uint_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (osStrcmp(filename, symbolArray[i]) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                isSymbolTableMatched = TRUE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        pathRemoveSlash(generateParam.filename);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSymbolTableMatched) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">snprintf</span>(pubKeyPath, MAX_KEY_LEN, <span class=\"string\">&quot;%s%s%s%s&quot;</span>, generateParam.filename, <span class=\"string\">&quot;/id_&quot;</span>, generateParam.algorithm, <span class=\"string\">&quot;.pub&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">snprintf</span>(priKeyPath, MAX_KEY_LEN, <span class=\"string\">&quot;%s%s%s&quot;</span>, generateParam.filename, <span class=\"string\">&quot;/id_&quot;</span>, generateParam.algorithm);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">snprintf</span>(pubKeyPath, MAX_KEY_LEN, <span class=\"string\">&quot;%s%s&quot;</span>, generateParam.filename, <span class=\"string\">&quot;.pub&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">snprintf</span>(priKeyPath, MAX_KEY_LEN, <span class=\"string\">&quot;%s&quot;</span>, generateParam.filename);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((pubFile = fopen(pubKeyPath, <span class=\"string\">&quot;w+&quot;</span>)) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Saving key \\&quot;%s\\&quot; failed: No such file or directory\\n&quot;</span>, pubKeyPath);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(ERROR_FILE_OPENING_FAILED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((priFile = fopen(priKeyPath, <span class=\"string\">&quot;w+&quot;</span>)) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        fclose(pubFile);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Saving key \\&quot;%s\\&quot; failed: No such file or directory\\n&quot;</span>, priKeyPath);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(ERROR_FILE_OPENING_FAILED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">size_t</span> rc1 = fwrite(certPublicKey, <span class=\"keyword\">sizeof</span>(<span class=\"type\">char_t</span>), osStrlen(certPublicKey), pubFile);</span><br><span class=\"line\">    <span class=\"type\">size_t</span> rc2 = fwrite(certPrivateKey, <span class=\"keyword\">sizeof</span>(<span class=\"type\">char_t</span>), osStrlen(certPrivateKey), priFile);</span><br><span class=\"line\"></span><br><span class=\"line\">    fclose(pubFile);</span><br><span class=\"line\">    fclose(priFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief rsa 证书生成</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return Error Code</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">error_t</span> <span class=\"title function_\">generateRsaCertKeys</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">error_t</span> error;</span><br><span class=\"line\"></span><br><span class=\"line\">    RsaPublicKey publicKey;</span><br><span class=\"line\">    RsaPrivateKey privateKey;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">size_t</span> bitSize = generateParam.bitSize ?: MIN_SUPPORT_BYTES;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char_t</span> certPublicKey[bitSize];</span><br><span class=\"line\">    <span class=\"type\">char_t</span> certPrivateKey[bitSize];</span><br><span class=\"line\"></span><br><span class=\"line\">    rsaInitPublicKey(&amp;publicKey);</span><br><span class=\"line\">    rsaInitPrivateKey(&amp;privateKey);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((error = rsaGenerateKeyPair(YARROW_PRNG_ALGO, &amp;yarrowContext, bitSize, <span class=\"number\">65537</span>, &amp;privateKey, &amp;publicKey))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed RSA key pair generation\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((error = sshExportRsaPublicKey(&amp;publicKey, certPublicKey, &amp;bitSize, SSH_PUBLIC_KEY_FORMAT_OPENSSH))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed Export an RSA public key to PEM format&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((error = sshExportRsaPrivateKey(&amp;privateKey, &amp;publicKey, certPrivateKey, &amp;bitSize, SSH_PRIVATE_KEY_FORMAT_OPENSSH))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed Export an RSA private key to PEM format\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    writeGenerateCertKeys(certPublicKey, certPrivateKey);</span><br><span class=\"line\"></span><br><span class=\"line\">    response:</span><br><span class=\"line\"></span><br><span class=\"line\">    rsaFreePublicKey(&amp;publicKey);</span><br><span class=\"line\">    rsaFreePrivateKey(&amp;privateKey);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @brief ssh-keygen</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return Unused value</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int_t</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int_t</span> argc, <span class=\"type\">char_t</span> *argv[])</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int_t</span> rc;</span><br><span class=\"line\">    <span class=\"type\">error_t</span> error;</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> seed[SEED_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc == <span class=\"number\">2</span> &amp;&amp; osStrcmp(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;--help&quot;</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        printUsage(HELP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * -b 指定密钥长度。对于 RSA 密钥，最低只支持 2048</span></span><br><span class=\"line\"><span class=\"comment\">     * -f 指定密钥文件名</span></span><br><span class=\"line\"><span class=\"comment\">     * -t 指定要创建的密钥类型。目前仅支持 rsa</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((rc = getopt(argc, argv, <span class=\"string\">&quot;b:f:t:&quot;</span>)) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (rc) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;b&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">uint_t</span> i = <span class=\"number\">0</span>; i &lt; osStrlen(optarg); ++i) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (osIsdigit(optarg[i]) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        printUsage(FAILED_BIT_TYPE);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                generateParam.bitSize = atoi(optarg);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (generateParam.bitSize &lt; MIN_SUPPORT_BYTES || generateParam.bitSize &gt; MAX_SUPPORT_BYTES) &#123;</span><br><span class=\"line\">                    printUsage(FAILED_BIT_SIZE);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;f&#x27;</span>:</span><br><span class=\"line\">                generateParam.filename = optarg;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;t&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (osStrcmp(optarg, <span class=\"string\">&quot;rsa&quot;</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    printUsage(HELP);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                generateParam.algorithm = optarg;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                printUsage(HELP);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((error = yarrowInit(&amp;yarrowContext))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to initialize PRNG!\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((error = yarrowSeed(&amp;yarrowContext, seed, <span class=\"keyword\">sizeof</span>(seed)))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to seed PRNG!\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> generateRsaCertKeys();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  Multi-precision integer library</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  Copyright The Mbed TLS Contributors</span></span><br><span class=\"line\"><span class=\"comment\"> *  SPDX-License-Identifier: Apache-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may</span></span><br><span class=\"line\"><span class=\"comment\"> *  not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> *  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span></span><br><span class=\"line\"><span class=\"comment\"> *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> *  See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> *  limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  The following sources were referenced in the design of this Multi-precision</span></span><br><span class=\"line\"><span class=\"comment\"> *  Integer library:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  [1] Handbook of Applied Cryptography - 1997</span></span><br><span class=\"line\"><span class=\"comment\"> *      Menezes, van Oorschot and Vanstone</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  [2] Multi-Precision Math</span></span><br><span class=\"line\"><span class=\"comment\"> *      Tom St Denis</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://github.com/libtom/libtommath/blob/develop/tommath.pdf</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  [3] GNU Multi-Precision Arithmetic Library</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://gmplib.org/manual/index.html</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//!!!MODIFIED FILE!!!</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;core/crypto.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mpi/mpi.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;rng/yarrow.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> YarrowContext yarrowContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MBEDTLS_MPI_CHK(f) <span class=\"keyword\">if</span>((ret = f) != 0) goto cleanup</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi Mpi</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_sint int_t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_uint uint_t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_init mpiInit</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_free mpiFree</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_sub_int mpiSubInt</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_copy mpiCopy</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_shift_r mpiShiftRight</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_shift_l mpiShiftLeft</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_bitlen mpiGetBitLength</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_cmp_mpi mpiComp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_cmp_int mpiCompInt</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_add_int mpiAddInt</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_mul_mpi mpiMul</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_mod_mpi mpiMod</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_inv_mod mpiInvMod</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_lset mpiSetValue</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_set_bit mpiSetBitValue</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_exp_mod mpiExpMod</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_sub_abs mpiSubAbs</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mbedtls_mpi_fill_random(xx, nn, algo, ctx) mpiRand(xx, (nn) * 8, algo, ctx)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ciL    (sizeof(mbedtls_mpi_uint))         <span class=\"comment\">/* chars in limb  */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> biL    (ciL &lt;&lt; 3)               <span class=\"comment\">/* bits  in limb  */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> biH    (ciL &lt;&lt; 2)               <span class=\"comment\">/* half limb size */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MBEDTLS_MPI_MAX_BITS 4096</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MBEDTLS_ERR_MPI_NOT_ACCEPTABLE (2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MBEDTLS_ERR_MPI_BAD_INPUT_DATA (3)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MBEDTLS_ERR_RSA_BAD_INPUT_DATA (4)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MBEDTLS_ERR_RSA_KEY_GEN_FAILED (5)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MBEDTLS_ERR_MPI_DIVISION_BY_ZERO (6)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MBEDTLS_ERR_MPI_NEGATIVE_VALUE (7)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> small_prime[] =</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"number\">3</span>,    <span class=\"number\">5</span>,    <span class=\"number\">7</span>,   <span class=\"number\">11</span>,   <span class=\"number\">13</span>,   <span class=\"number\">17</span>,   <span class=\"number\">19</span>,   <span class=\"number\">23</span>,</span><br><span class=\"line\">       <span class=\"number\">29</span>,   <span class=\"number\">31</span>,   <span class=\"number\">37</span>,   <span class=\"number\">41</span>,   <span class=\"number\">43</span>,   <span class=\"number\">47</span>,   <span class=\"number\">53</span>,   <span class=\"number\">59</span>,</span><br><span class=\"line\">       <span class=\"number\">61</span>,   <span class=\"number\">67</span>,   <span class=\"number\">71</span>,   <span class=\"number\">73</span>,   <span class=\"number\">79</span>,   <span class=\"number\">83</span>,   <span class=\"number\">89</span>,   <span class=\"number\">97</span>,</span><br><span class=\"line\">      <span class=\"number\">101</span>,  <span class=\"number\">103</span>,  <span class=\"number\">107</span>,  <span class=\"number\">109</span>,  <span class=\"number\">113</span>,  <span class=\"number\">127</span>,  <span class=\"number\">131</span>,  <span class=\"number\">137</span>,</span><br><span class=\"line\">      <span class=\"number\">139</span>,  <span class=\"number\">149</span>,  <span class=\"number\">151</span>,  <span class=\"number\">157</span>,  <span class=\"number\">163</span>,  <span class=\"number\">167</span>,  <span class=\"number\">173</span>,  <span class=\"number\">179</span>,</span><br><span class=\"line\">      <span class=\"number\">181</span>,  <span class=\"number\">191</span>,  <span class=\"number\">193</span>,  <span class=\"number\">197</span>,  <span class=\"number\">199</span>,  <span class=\"number\">211</span>,  <span class=\"number\">223</span>,  <span class=\"number\">227</span>,</span><br><span class=\"line\">      <span class=\"number\">229</span>,  <span class=\"number\">233</span>,  <span class=\"number\">239</span>,  <span class=\"number\">241</span>,  <span class=\"number\">251</span>,  <span class=\"number\">257</span>,  <span class=\"number\">263</span>,  <span class=\"number\">269</span>,</span><br><span class=\"line\">      <span class=\"number\">271</span>,  <span class=\"number\">277</span>,  <span class=\"number\">281</span>,  <span class=\"number\">283</span>,  <span class=\"number\">293</span>,  <span class=\"number\">307</span>,  <span class=\"number\">311</span>,  <span class=\"number\">313</span>,</span><br><span class=\"line\">      <span class=\"number\">317</span>,  <span class=\"number\">331</span>,  <span class=\"number\">337</span>,  <span class=\"number\">347</span>,  <span class=\"number\">349</span>,  <span class=\"number\">353</span>,  <span class=\"number\">359</span>,  <span class=\"number\">367</span>,</span><br><span class=\"line\">      <span class=\"number\">373</span>,  <span class=\"number\">379</span>,  <span class=\"number\">383</span>,  <span class=\"number\">389</span>,  <span class=\"number\">397</span>,  <span class=\"number\">401</span>,  <span class=\"number\">409</span>,  <span class=\"number\">419</span>,</span><br><span class=\"line\">      <span class=\"number\">421</span>,  <span class=\"number\">431</span>,  <span class=\"number\">433</span>,  <span class=\"number\">439</span>,  <span class=\"number\">443</span>,  <span class=\"number\">449</span>,  <span class=\"number\">457</span>,  <span class=\"number\">461</span>,</span><br><span class=\"line\">      <span class=\"number\">463</span>,  <span class=\"number\">467</span>,  <span class=\"number\">479</span>,  <span class=\"number\">487</span>,  <span class=\"number\">491</span>,  <span class=\"number\">499</span>,  <span class=\"number\">503</span>,  <span class=\"number\">509</span>,</span><br><span class=\"line\">      <span class=\"number\">521</span>,  <span class=\"number\">523</span>,  <span class=\"number\">541</span>,  <span class=\"number\">547</span>,  <span class=\"number\">557</span>,  <span class=\"number\">563</span>,  <span class=\"number\">569</span>,  <span class=\"number\">571</span>,</span><br><span class=\"line\">      <span class=\"number\">577</span>,  <span class=\"number\">587</span>,  <span class=\"number\">593</span>,  <span class=\"number\">599</span>,  <span class=\"number\">601</span>,  <span class=\"number\">607</span>,  <span class=\"number\">613</span>,  <span class=\"number\">617</span>,</span><br><span class=\"line\">      <span class=\"number\">619</span>,  <span class=\"number\">631</span>,  <span class=\"number\">641</span>,  <span class=\"number\">643</span>,  <span class=\"number\">647</span>,  <span class=\"number\">653</span>,  <span class=\"number\">659</span>,  <span class=\"number\">661</span>,</span><br><span class=\"line\">      <span class=\"number\">673</span>,  <span class=\"number\">677</span>,  <span class=\"number\">683</span>,  <span class=\"number\">691</span>,  <span class=\"number\">701</span>,  <span class=\"number\">709</span>,  <span class=\"number\">719</span>,  <span class=\"number\">727</span>,</span><br><span class=\"line\">      <span class=\"number\">733</span>,  <span class=\"number\">739</span>,  <span class=\"number\">743</span>,  <span class=\"number\">751</span>,  <span class=\"number\">757</span>,  <span class=\"number\">761</span>,  <span class=\"number\">769</span>,  <span class=\"number\">773</span>,</span><br><span class=\"line\">      <span class=\"number\">787</span>,  <span class=\"number\">797</span>,  <span class=\"number\">809</span>,  <span class=\"number\">811</span>,  <span class=\"number\">821</span>,  <span class=\"number\">823</span>,  <span class=\"number\">827</span>,  <span class=\"number\">829</span>,</span><br><span class=\"line\">      <span class=\"number\">839</span>,  <span class=\"number\">853</span>,  <span class=\"number\">857</span>,  <span class=\"number\">859</span>,  <span class=\"number\">863</span>,  <span class=\"number\">877</span>,  <span class=\"number\">881</span>,  <span class=\"number\">883</span>,</span><br><span class=\"line\">      <span class=\"number\">887</span>,  <span class=\"number\">907</span>,  <span class=\"number\">911</span>,  <span class=\"number\">919</span>,  <span class=\"number\">929</span>,  <span class=\"number\">937</span>,  <span class=\"number\">941</span>,  <span class=\"number\">947</span>,</span><br><span class=\"line\">      <span class=\"number\">953</span>,  <span class=\"number\">967</span>,  <span class=\"number\">971</span>,  <span class=\"number\">977</span>,  <span class=\"number\">983</span>,  <span class=\"number\">991</span>,  <span class=\"number\">997</span>, <span class=\"number\">-103</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Return the number of less significant zero-bits</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">size_t</span> <span class=\"title function_\">mbedtls_mpi_lsb</span><span class=\"params\">( <span class=\"type\">const</span> mbedtls_mpi *X )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> i, j, count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( i = <span class=\"number\">0</span>; i &lt; X-&gt;size; i++ )</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">32</span>; j++, count++ )</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( ( ( X-&gt;data[i] &gt;&gt; j ) &amp; <span class=\"number\">1</span> ) != <span class=\"number\">0</span> )</span><br><span class=\"line\">                <span class=\"keyword\">return</span>( count );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Modulo: r = A mod b</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">mbedtls_mpi_mod_int</span><span class=\"params\">( mbedtls_mpi_uint *r, <span class=\"type\">const</span> mbedtls_mpi *A, mbedtls_mpi_sint b )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> i;</span><br><span class=\"line\">    mbedtls_mpi_uint x, y, z;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( b == <span class=\"number\">0</span> )</span><br><span class=\"line\">        <span class=\"keyword\">return</span>( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( b &lt; <span class=\"number\">0</span> )</span><br><span class=\"line\">        <span class=\"keyword\">return</span>( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * handle trivial cases</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( b == <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *r = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( b == <span class=\"number\">2</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *r = A-&gt;data[<span class=\"number\">0</span>] &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * general case</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( i = A-&gt;size, y = <span class=\"number\">0</span>; i &gt; <span class=\"number\">0</span>; i-- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x  = A-&gt;data[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        y  = ( y &lt;&lt; biH ) | ( x &gt;&gt; biH );</span><br><span class=\"line\">        z  = y / b;</span><br><span class=\"line\">        y -= z * b;</span><br><span class=\"line\"></span><br><span class=\"line\">        x &lt;&lt;= biH;</span><br><span class=\"line\">        y  = ( y &lt;&lt; biH ) | ( x &gt;&gt; biH );</span><br><span class=\"line\">        z  = y / b;</span><br><span class=\"line\">        y -= z * b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * If A is negative, then the current y represents a negative value.</span></span><br><span class=\"line\"><span class=\"comment\">     * Flipping it to the positive side.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( A-&gt;sign &lt; <span class=\"number\">0</span> &amp;&amp; y != <span class=\"number\">0</span> )</span><br><span class=\"line\">        y = b - y;</span><br><span class=\"line\"></span><br><span class=\"line\">    *r = y;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">mbedtls_mpi_gcd</span><span class=\"params\">( mbedtls_mpi *G, <span class=\"type\">const</span> mbedtls_mpi *A, <span class=\"type\">const</span> mbedtls_mpi *B )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> lz, lzt;</span><br><span class=\"line\">    mbedtls_mpi TG, TA, TB;</span><br><span class=\"line\"></span><br><span class=\"line\">    mbedtls_mpi_init( &amp;TG ); mbedtls_mpi_init( &amp;TA ); mbedtls_mpi_init( &amp;TB );</span><br><span class=\"line\"></span><br><span class=\"line\">    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &amp;TA, A ) );</span><br><span class=\"line\">    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &amp;TB, B ) );</span><br><span class=\"line\"></span><br><span class=\"line\">    lz = mbedtls_mpi_lsb( &amp;TA );</span><br><span class=\"line\">    lzt = mbedtls_mpi_lsb( &amp;TB );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( lzt &lt; lz )</span><br><span class=\"line\">        lz = lzt;</span><br><span class=\"line\"></span><br><span class=\"line\">    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &amp;TA, lz ) );</span><br><span class=\"line\">    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &amp;TB, lz ) );</span><br><span class=\"line\"></span><br><span class=\"line\">    TA.sign = TB.sign = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>( mbedtls_mpi_cmp_int( &amp;TA, <span class=\"number\">0</span> ) != <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &amp;TA, mbedtls_mpi_lsb( &amp;TA ) ) );</span><br><span class=\"line\">        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &amp;TB, mbedtls_mpi_lsb( &amp;TB ) ) );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( mbedtls_mpi_cmp_mpi( &amp;TA, &amp;TB ) &gt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &amp;TA, &amp;TA, &amp;TB ) );</span><br><span class=\"line\">            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &amp;TA, <span class=\"number\">1</span> ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &amp;TB, &amp;TB, &amp;TA ) );</span><br><span class=\"line\">            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &amp;TB, <span class=\"number\">1</span> ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &amp;TB, lz ) );</span><br><span class=\"line\">    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &amp;TB ) );</span><br><span class=\"line\"></span><br><span class=\"line\">cleanup:</span><br><span class=\"line\"></span><br><span class=\"line\">    mbedtls_mpi_free( &amp;TG );</span><br><span class=\"line\">    mbedtls_mpi_free( &amp;TA );</span><br><span class=\"line\">    mbedtls_mpi_free( &amp;TB );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>( ret );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Small divisors test (X must be positive)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Return values:</span></span><br><span class=\"line\"><span class=\"comment\"> * 0: no small factor (possible prime, more tests needed)</span></span><br><span class=\"line\"><span class=\"comment\"> * 1: certain prime</span></span><br><span class=\"line\"><span class=\"comment\"> * MBEDTLS_ERR_MPI_NOT_ACCEPTABLE: certain non-prime</span></span><br><span class=\"line\"><span class=\"comment\"> * other negative: error</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mpi_check_small_factors</span><span class=\"params\">( <span class=\"type\">const</span> mbedtls_mpi *X )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> i;</span><br><span class=\"line\">    mbedtls_mpi_uint r;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( ( X-&gt;data[<span class=\"number\">0</span>] &amp; <span class=\"number\">1</span> ) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        <span class=\"keyword\">return</span>( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( i = <span class=\"number\">0</span>; small_prime[i] &gt; <span class=\"number\">0</span>; i++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( mbedtls_mpi_cmp_int( X, small_prime[i] ) &lt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">            <span class=\"keyword\">return</span>( <span class=\"number\">1</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &amp;r, X, small_prime[i] ) );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( r == <span class=\"number\">0</span> )</span><br><span class=\"line\">            <span class=\"keyword\">return</span>( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cleanup:</span><br><span class=\"line\">    <span class=\"keyword\">return</span>( ret );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Miller-Rabin pseudo-primality test  (HAC 4.24)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mpi_miller_rabin</span><span class=\"params\">( <span class=\"type\">const</span> mbedtls_mpi *X,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">const</span> PrngAlgo *prngAlgo, <span class=\"type\">void</span> *prngContext)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret, count;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> i, j, k, n, s;</span><br><span class=\"line\">    mbedtls_mpi W, R, T, A; <span class=\"comment\">//, RR;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    mbedtls_mpi_init( &amp;W );</span><br><span class=\"line\">    mbedtls_mpi_init( &amp;R );</span><br><span class=\"line\">    mbedtls_mpi_init( &amp;T );</span><br><span class=\"line\">    mbedtls_mpi_init( &amp;A );</span><br><span class=\"line\">    <span class=\"comment\">//mbedtls_mpi_init( &amp;RR );</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * W = |X| - 1</span></span><br><span class=\"line\"><span class=\"comment\">     * R = W &gt;&gt; lsb( W )</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &amp;W, X, <span class=\"number\">1</span> ) );</span><br><span class=\"line\">    s = mbedtls_mpi_lsb( &amp;W );</span><br><span class=\"line\">    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &amp;R, &amp;W ) );</span><br><span class=\"line\">    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &amp;R, s ) );</span><br><span class=\"line\"></span><br><span class=\"line\">    i = mbedtls_mpi_bitlen( X );</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * HAC, table 4.4</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    n = ( ( i &gt;= <span class=\"number\">1300</span> ) ?  <span class=\"number\">2</span> : ( i &gt;=  <span class=\"number\">850</span> ) ?  <span class=\"number\">3</span> :</span><br><span class=\"line\">          ( i &gt;=  <span class=\"number\">650</span> ) ?  <span class=\"number\">4</span> : ( i &gt;=  <span class=\"number\">350</span> ) ?  <span class=\"number\">8</span> :</span><br><span class=\"line\">          ( i &gt;=  <span class=\"number\">250</span> ) ? <span class=\"number\">12</span> : ( i &gt;=  <span class=\"number\">150</span> ) ? <span class=\"number\">18</span> : <span class=\"number\">27</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( i = <span class=\"number\">0</span>; i &lt; n; i++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * pick a random A, 1 &lt; A &lt; |X| - 1</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &amp;A, X-&gt;size * ciL, prngAlgo, prngContext ) );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( mbedtls_mpi_cmp_mpi( &amp;A, &amp;W ) &gt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            j = mbedtls_mpi_bitlen( &amp;A ) - mbedtls_mpi_bitlen( &amp;W );</span><br><span class=\"line\">            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &amp;A, j + <span class=\"number\">1</span> ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        A.data[<span class=\"number\">0</span>] |= <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &amp;A, X-&gt;size * ciL, prngAlgo, prngContext ) );</span><br><span class=\"line\"></span><br><span class=\"line\">            j = mbedtls_mpi_bitlen( &amp;A );</span><br><span class=\"line\">            k = mbedtls_mpi_bitlen( &amp;W );</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j &gt; k) &#123;</span><br><span class=\"line\">                MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &amp;A, j - k ) );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count++ &gt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> ( mbedtls_mpi_cmp_mpi( &amp;A, &amp;W ) &gt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">                  mbedtls_mpi_cmp_int( &amp;A, <span class=\"number\">1</span> )  &lt;= <span class=\"number\">0</span>    );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * A = A^R mod |X|</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &amp;A, &amp;A, &amp;R, X <span class=\"comment\">/*, &amp;RR*/</span> ) );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( mbedtls_mpi_cmp_mpi( &amp;A, &amp;W ) == <span class=\"number\">0</span> ||</span><br><span class=\"line\">            mbedtls_mpi_cmp_int( &amp;A,  <span class=\"number\">1</span> ) == <span class=\"number\">0</span> )</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        j = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( j &lt; s &amp;&amp; mbedtls_mpi_cmp_mpi( &amp;A, &amp;W ) != <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * A = A * A mod |X|</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &amp;T, &amp;A, &amp;A ) );</span><br><span class=\"line\">            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &amp;A, &amp;T, X  ) );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>( mbedtls_mpi_cmp_int( &amp;A, <span class=\"number\">1</span> ) == <span class=\"number\">0</span> )</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * not prime if A != |X| - 1 or A == 1</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( mbedtls_mpi_cmp_mpi( &amp;A, &amp;W ) != <span class=\"number\">0</span> ||</span><br><span class=\"line\">            mbedtls_mpi_cmp_int( &amp;A,  <span class=\"number\">1</span> ) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cleanup:</span><br><span class=\"line\">    mbedtls_mpi_free( &amp;W );</span><br><span class=\"line\">    mbedtls_mpi_free( &amp;R );</span><br><span class=\"line\">    mbedtls_mpi_free( &amp;T );</span><br><span class=\"line\">    mbedtls_mpi_free( &amp;A );</span><br><span class=\"line\">    <span class=\"comment\">//mbedtls_mpi_free( &amp;RR );</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>( ret );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Pseudo-primality test: small factors, then Miller-Rabin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">mbedtls_mpi_is_prime</span><span class=\"params\">( <span class=\"type\">const</span> mbedtls_mpi *X,</span></span><br><span class=\"line\"><span class=\"params\">                  <span class=\"type\">const</span> PrngAlgo *prngAlgo, <span class=\"type\">void</span> *prngContext )</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret;</span><br><span class=\"line\">    mbedtls_mpi XX;</span><br><span class=\"line\"></span><br><span class=\"line\">    XX.sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">    XX.size = X-&gt;size;</span><br><span class=\"line\">    XX.data = X-&gt;data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( mbedtls_mpi_cmp_int( &amp;XX, <span class=\"number\">0</span> ) == <span class=\"number\">0</span> ||</span><br><span class=\"line\">        mbedtls_mpi_cmp_int( &amp;XX, <span class=\"number\">1</span> ) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        <span class=\"keyword\">return</span>( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( mbedtls_mpi_cmp_int( &amp;XX, <span class=\"number\">2</span> ) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( ( ret = mpi_check_small_factors( &amp;XX ) ) != <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( ret == <span class=\"number\">1</span> )</span><br><span class=\"line\">            <span class=\"keyword\">return</span>( <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>( ret );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>( mpi_miller_rabin( &amp;XX, prngAlgo, prngContext ) );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">error_t</span> <span class=\"title function_\">mpiCheckProbablePrime</span><span class=\"params\">(<span class=\"type\">const</span> Mpi *a)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> err;</span><br><span class=\"line\">   </span><br><span class=\"line\">   err = mbedtls_mpi_is_prime(a, YARROW_PRNG_ALGO, &amp;yarrowContext);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">if</span>(err == <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> NO_ERROR;</span><br><span class=\"line\">   <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(err == MBEDTLS_ERR_MPI_NOT_ACCEPTABLE)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ERROR_INVALID_VALUE;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> ERROR_FAILURE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p>基于标准的 Posix 接口和 CycloneCRYPTO 完成的 ssh-keygen 客户端，可以用于生成 rsa 的秘钥对，CycloneCRYPTO 官方并未提供素数生成的算法，此为开源的一个素数算法实现。</p>\n</div>\n","feature":true,"text":"RSA 加密是一种非对称加密算法，使用一对密钥进行加解密，分别为公钥和私钥。公钥用于加密信息，私钥用于解密信息。这种设置使得发送者可以使用公钥加密信息并发送给接收者，而只有接收者持有相应私钥才能解密并读取信息。...","permalink":"/post/RSA-非对称加密","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[],"tags":[{"name":"加密算法","slug":"加密算法","count":1,"path":"api/tags/加密算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E4%B8%8E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">非对称与对称加密</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">非对称加密</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">非对称加密的应用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">对称加密</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">对称加密应用场景</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E7%A7%98%E9%92%A5%E5%AF%B9\"><span class=\"toc-text\">生成秘钥对</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-RSA-%E5%8A%A0%E8%A7%A3%E5%AF%86\"><span class=\"toc-text\">PHP RSA 加解密</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E6%A4%8D-ssh-keygen-%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">移植 ssh-keygen 客户端</span></a></li></ol>","author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"MySQL 读写分离","uid":"263e776b7c4ab948e2c3d7edc00d6223","slug":"MySQL-读写分离","date":"2024-02-26T12:27:04.000Z","updated":"2024-02-26T13:37:02.893Z","comments":true,"path":"api/articles/MySQL-读写分离.json","keywords":null,"cover":null,"text":"MySQL 读写分离是一种数据库架构设计模式，旨在提高数据库性能和可伸缩性。它通过将读请求和写请求分发到不同的数据库实例上来实现。...","permalink":"/post/MySQL-读写分离","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Compoer","uid":"709b09d4ae43a807a27c1aa5f06ca26b","slug":"Compoer","date":"2024-02-22T10:58:00.000Z","updated":"2024-02-26T07:46:36.785Z","comments":true,"path":"api/articles/Compoer.json","keywords":null,"cover":[],"text":"Composer 作为目前 PHP 包依赖管理的最佳工具，值得每一位 PHP 开发人员掌握。...","permalink":"/post/Compoer","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"PHP","slug":"PHP","count":1,"path":"api/tags/PHP.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}