{"title":"会话技术","uid":"425d803af0b4bf31b2b7e015a65ed6f3","slug":"会话技术","date":"2024-02-22T05:56:20.000Z","updated":"2024-02-26T07:46:39.530Z","comments":true,"path":"api/articles/会话技术.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>💡 Tips：HTTP 的一大特点<strong>“无状态”</strong>，是其最初版本的设计特点之一，而这一特点一直保持到 HTTP 的最新版本。无状态意味着<strong>每个请求之间是相互独立的</strong>，<strong>服务器不会保存关于客户端请求的任何信息</strong>。这意味着每个请求都需要包含所有必要的信息，因此服务器可以理解并响应。</p>\n<p>虽然 HTTP 的无状态特性一直是保留下来的核心概念，但是随着时间的推移，HTTP 协议的演变和发展已经引入了一些机制来处理状态信息，比如 <strong>Cookie</strong>、<strong>Session</strong> 等机制。这些机制允许服务器和客户端在一系列请求之间共享状态信息，从而实现了在无状态协议中模拟有状态的行为。</p>\n<p>总的来说，尽管 HTTP 协议的基本无状态特性一直保持着，但随着技术的发展和需求的变化，HTTP 协议的实现和使用中引入了许多额外的功能和机制来处理状态信息，以满足现代网络应用的需求。</p></blockquote>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>Cookie 是客户端使用的一种记录客户端状态的机制，是由 W3C 组织提出，最早由 Netscape(网景) 社区发展的一种机制。目前 Cookie 已经成为标准，所有的主流浏览器基本都支持 Cookie。</p>\n<h4 id=\"Cookie-工作流程\"><a href=\"#Cookie-工作流程\" class=\"headerlink\" title=\"Cookie 工作流程\"></a>Cookie 工作流程</h4><p><strong>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据</strong>，<strong>它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上</strong>：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240222142339.png\"></div>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><strong>服务器端设置 Cookie：</strong> 当客户端向服务器发送请求时，服务器可以在 HTTP 响应消息报头中插入 Set-Cookie 标头，以设置 Cookie。Set-Cookie 标头包含了 Cookie 的名称、值以及其他可选的属性，如过期时间、域、路径等；</li>\n<li><strong>客户端保存 Cookie：</strong> 客户端收到服务器发送的响应后，会将其中的 Set-Cookie 标头中的 Cookie 保存起来。<strong>如果 Cookie 设置了过期时间，那么它将会被持久地存储，直到到达过期时间</strong>；<strong>如果没有设置过期时间，那么它将只在客户端的内存中存储，并在关闭浏览器时被删除</strong>；</li>\n<li><strong>客户端发送 Cookie：</strong> 当客户端向服务器发送新的请求时，它会自动在请求报头中插入所有与当前域相关联的 Cookie；</li>\n<li><strong>服务器端读取 Cookie：</strong> 服务器收到客户端的请求后，可以通过读取请求报头中的 Cookie 来获取客户端发送的数据。服务器可以根据这些 Cookie 来识别用户状态、执行个性化操作等；</li>\n</ol></blockquote>\n<h4 id=\"Cookie-应用场景\"><a href=\"#Cookie-应用场景\" class=\"headerlink\" title=\"Cookie 应用场景\"></a>Cookie 应用场景</h4><ul>\n<li>个性化设置：如用户自定义设置、主题等；</li>\n<li>浏览器行为跟踪：如跟踪分析用户行为等；</li>\n<li>会话状态管理：如用户登录状态、购物车、游戏分数或其它需要记录的信息；</li>\n</ul>\n<h4 id=\"Cookie-一些细节\"><a href=\"#Cookie-一些细节\" class=\"headerlink\" title=\"Cookie 一些细节\"></a>Cookie 一些细节</h4><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<ul>\n<li><strong>持久存储的 Cookie： 存储在客户端的磁盘上</strong>，因此可以在浏览器会话之间持续存在，即使关闭浏览器再打开也会继续存在。这种类型的 Cookie 可以通过设置过期时间来控制其持续时间，但它们不会跨越浏览器或设备边界，因为它们存储在本地文件系统中，每个浏览器和设备都有自己的本地文件系统，<strong>但通过 Cookie 导出导入可以做到跨浏览器和设备</strong>；</li>\n<li><strong>非持久存储的 Cookie：</strong> <strong>存储在客户端的内存中</strong>，通常在关闭浏览器时就会被销毁。这种 Cookie 通常用于临时性数据的存储，比如会话标识符等。因为它们只存储在内存中，并且会在浏览器关闭时被销毁，所以不能持久存在，也不会跨越浏览器或设备边界；</li>\n<li><strong>存储大小限制：</strong> 每个 Cookie 的存储大小<strong>通常限制在 4KB 左右</strong>。这意味着单个 Cookie 的键值对及其相关的元数据（如过期时间、域、路径等）总共不能超过这个大小；</li>\n<li><strong>最大 Cookie 数量限制：</strong> 一个浏览器通常会限制每个域名下的 Cookie 数量，<strong>一般不超过 300 个</strong> Cookie。这个限制旨在防止网站过度使用 Cookie，以及减轻客户端存储的压力；</li>\n<li><strong>单个网站 Cookie 数量限制：</strong>每个网站最多可以设置的 Cookie 数量通常也有限制，<strong>一般不超过 20 个</strong>。这个限制有助于确保网站不会过度依赖 Cookie 来存储大量数据，以及减少客户端存储的负担；</li>\n<li><strong>Cookie 同源策略：Cookie 同源策略允许在同一父级域名下共享 Cookie</strong>。这意味着当设置了一个 Cookie 的 “domain” 属性时，该 Cookie 将在指定的域名以及其所有的子域名下可见。因此，当访问子域名时，浏览器会发送父级域名下的 Cookie，使得跨子域名间可以共享用户状态信息；</li>\n</ul>\n\n</div>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>Session 是一种服务器端的状态管理机制，用于存储和跟踪用户的会话信息。与 Cookie 不同，Session 数据存储在服务器端，而不是客户端。</p>\n<h4 id=\"Session-工作流程\"><a href=\"#Session-工作流程\" class=\"headerlink\" title=\"Session 工作流程\"></a>Session 工作流程</h4><p>Session 与 Cookie 有很大的相似，服务端最终响应给客户端的是一段 Cookie，从而可以说 Session 的实现依赖 Cookie：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/NezhaGrin/MyImages/20240222153743.png\"></div>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><strong>服务器创建 Session：</strong> 服务器为用户创建一个新的 Session，并生成一个唯一的 SessionID；</li>\n<li><strong>发送 SessionID 给客户端：</strong> 服务器将 SessionID 放置在 Set-Cookie 标头中发送给客户端；</li>\n<li><strong>客户端保存 SessionID：</strong> 客户端（浏览器）保存接收到的 SessionID；</li>\n<li><strong>客户端发送请求并携带 SessionID：</strong> 客户端发送请求时，自动将保存的 SessionID 放置在请求的 Cookie 中发送给服务器；</li>\n<li><strong>服务器根据 SessionID 获取数据：</strong> 服务器根据 SessionID 获取与用户相关的会话数据；</li>\n<li><strong>服务器返回响应：</strong> 服务器根据请求处理结果生成响应并发送给客户端；</li>\n</ol></blockquote>\n<h4 id=\"Session-应用场景\"><a href=\"#Session-应用场景\" class=\"headerlink\" title=\"Session 应用场景\"></a>Session 应用场景</h4><p>跟 Cookie 一样，没啥子差别。</p>\n<h4 id=\"Session-一些细节\"><a href=\"#Session-一些细节\" class=\"headerlink\" title=\"Session 一些细节\"></a>Session 一些细节</h4><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<p><ul>\n<li>禁用了 Cookie 之后 Session 还可以用嘛？<ul>\n<li>Session 实现关键是 SessionID，只需要将 SessionID 传递给浏览器，浏览器在请求的时候再将 SessionID 传递给服务器，就可以实现 Session；</li>\n</ul>\n</li>\n<li>假如使用了 Nginx 服务器软件做了负载均衡，那么会发现丢失 Session 的问题。出现丢失 Session 问题怎么办呢？<ul>\n<li>可以使用用 Nginx ip_hash 算法解决；</li>\n</ul>\n</li>\n</ul>\n</p>\n</div>\n<h3 id=\"Session-和-Cookie-的区别\"><a href=\"#Session-和-Cookie-的区别\" class=\"headerlink\" title=\"Session 和 Cookie 的区别\"></a>Session 和 Cookie 的区别</h3><div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">TIP</p>\n<ul>\n<li>Session 存储在服务端，Cookie 存储在客户端；</li>\n<li>Session 用户无法查看和修改，Cookie 用户可以查看修改；</li>\n<li>Session 和 Cookie 的存储容量不同，Cookie 有各种限制，Session 没有限制；</li>\n</ul>\n\n</div>\n","text":"Session 是一种服务器端的状态管理机制，用于存储和跟踪用户的会话信息。与 Cookie 不同，Session 数据存储在服务器端，而不是客户端...","permalink":"/post/会话技术","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"网络协议","slug":"网络协议","count":2,"path":"api/tags/网络协议.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cookie\"><span class=\"toc-text\">Cookie</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Cookie-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">Cookie 工作流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Cookie-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">Cookie 应用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Cookie-%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">Cookie 一些细节</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Session\"><span class=\"toc-text\">Session</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Session-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">Session 工作流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Session-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">Session 应用场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Session-%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">Session 一些细节</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Session-%E5%92%8C-Cookie-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">Session 和 Cookie 的区别</span></a></li></ol>","author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Docker","uid":"a48e6dda0c21e40880cba7e763278b04","slug":"Docker","date":"2024-02-22T08:03:32.000Z","updated":"2024-02-26T07:46:46.760Z","comments":true,"path":"api/articles/Docker.json","keywords":null,"cover":null,"text":"Docker 是一个开源的容器化平台，用于轻松打包、发布和运行应用程序。通过 Docker，开发者可以将应用程序及其依赖项打包到一个称为镜像的标准化单元中，然后在任何支持 Docker 的环境中部署这些镜像为容器。...","permalink":"/post/Docker","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"搞定 HTTP 协议","uid":"44a298e41e961f01947480950600547b","slug":"搞定-HTTP-协议","date":"2024-02-18T09:19:57.000Z","updated":"2024-02-26T12:14:05.328Z","comments":true,"path":"api/articles/搞定-HTTP-协议.json","keywords":null,"cover":[],"text":"1991 年发布的 HTTP/0.9 版本发布，该版本及其的简单，只有一个命令 GET ，且只支持文本传输...","permalink":"/post/搞定-HTTP-协议","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"网络协议","slug":"网络协议","count":2,"path":"api/tags/网络协议.json"}],"author":{"name":"哪吒","slug":"blog-author","avatar":"https://pic.imgdb.cn/item/65ba193b871b83018a65323c.jpg","link":"/","description":"人心中的成见就像一座大山，任你怎么努力也休想搬动。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}